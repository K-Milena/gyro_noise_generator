
sound_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006758  08006758  00007758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006950  08006950  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006950  08006950  00007950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006958  08006958  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006958  08006958  00007958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800695c  0800695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006960  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  20000010  08006970  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  08006970  00008920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba40  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d4  00000000  00000000  00013a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00015c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000815  00000000  00000000  000166e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001694a  00000000  00000000  00016efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebf6  00000000  00000000  0002d847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892bd  00000000  00000000  0003c43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c56fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e98  00000000  00000000  000c5740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c85d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006740 	.word	0x08006740

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08006740 	.word	0x08006740

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96a 	b.w	8000dc0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d14e      	bne.n	8000bae <__udivmoddi4+0xaa>
 8000b10:	4694      	mov	ip, r2
 8000b12:	458c      	cmp	ip, r1
 8000b14:	4686      	mov	lr, r0
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	d962      	bls.n	8000be2 <__udivmoddi4+0xde>
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0320 	rsb	r3, r2, #32
 8000b22:	4091      	lsls	r1, r2
 8000b24:	fa20 f303 	lsr.w	r3, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b36:	fa1f f68c 	uxth.w	r6, ip
 8000b3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b42:	fb07 1114 	mls	r1, r7, r4, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb04 f106 	mul.w	r1, r4, r6
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x64>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b5a:	f080 8112 	bcs.w	8000d82 <__udivmoddi4+0x27e>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 810f 	bls.w	8000d82 <__udivmoddi4+0x27e>
 8000b64:	3c02      	subs	r4, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b72:	fb07 1110 	mls	r1, r7, r0, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f606 	mul.w	r6, r0, r6
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x94>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8a:	f080 80fc 	bcs.w	8000d86 <__udivmoddi4+0x282>
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	f240 80f9 	bls.w	8000d86 <__udivmoddi4+0x282>
 8000b94:	4463      	add	r3, ip
 8000b96:	3802      	subs	r0, #2
 8000b98:	1b9b      	subs	r3, r3, r6
 8000b9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	b11d      	cbz	r5, 8000baa <__udivmoddi4+0xa6>
 8000ba2:	40d3      	lsrs	r3, r2
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e9c5 3200 	strd	r3, r2, [r5]
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d905      	bls.n	8000bbe <__udivmoddi4+0xba>
 8000bb2:	b10d      	cbz	r5, 8000bb8 <__udivmoddi4+0xb4>
 8000bb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e7f5      	b.n	8000baa <__udivmoddi4+0xa6>
 8000bbe:	fab3 f183 	clz	r1, r3
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d146      	bne.n	8000c54 <__udivmoddi4+0x150>
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xcc>
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	f0c0 80f0 	bcc.w	8000db0 <__udivmoddi4+0x2ac>
 8000bd0:	1a86      	subs	r6, r0, r2
 8000bd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d0e6      	beq.n	8000baa <__udivmoddi4+0xa6>
 8000bdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000be0:	e7e3      	b.n	8000baa <__udivmoddi4+0xa6>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	f040 8090 	bne.w	8000d08 <__udivmoddi4+0x204>
 8000be8:	eba1 040c 	sub.w	r4, r1, ip
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb08 4416 	mls	r4, r8, r6, r4
 8000c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c06:	fb07 f006 	mul.w	r0, r7, r6
 8000c0a:	4298      	cmp	r0, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x11c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x11a>
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000c1e:	4626      	mov	r6, r4
 8000c20:	1a1c      	subs	r4, r3, r0
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb00 f707 	mul.w	r7, r0, r7
 8000c36:	429f      	cmp	r7, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x148>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x146>
 8000c44:	429f      	cmp	r7, r3
 8000c46:	f200 80b0 	bhi.w	8000daa <__udivmoddi4+0x2a6>
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	1bdb      	subs	r3, r3, r7
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	e7a5      	b.n	8000ba0 <__udivmoddi4+0x9c>
 8000c54:	f1c1 0620 	rsb	r6, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c64:	fa04 f301 	lsl.w	r3, r4, r1
 8000c68:	ea43 030c 	orr.w	r3, r3, ip
 8000c6c:	40f4      	lsrs	r4, r6
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	0c38      	lsrs	r0, r7, #16
 8000c74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c78:	fbb4 fef0 	udiv	lr, r4, r0
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fb00 441e 	mls	r4, r0, lr, r4
 8000c84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c88:	fb0e f90c 	mul.w	r9, lr, ip
 8000c8c:	45a1      	cmp	r9, r4
 8000c8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x1a6>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c9a:	f080 8084 	bcs.w	8000da6 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8081 	bls.w	8000da6 <__udivmoddi4+0x2a2>
 8000ca4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	eba4 0409 	sub.w	r4, r4, r9
 8000cae:	fa1f f983 	uxth.w	r9, r3
 8000cb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x1d2>
 8000cc6:	193c      	adds	r4, r7, r4
 8000cc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ccc:	d267      	bcs.n	8000d9e <__udivmoddi4+0x29a>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0x29a>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cda:	fba0 9302 	umull	r9, r3, r0, r2
 8000cde:	eba4 040c 	sub.w	r4, r4, ip
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	46ce      	mov	lr, r9
 8000ce6:	469c      	mov	ip, r3
 8000ce8:	d351      	bcc.n	8000d8e <__udivmoddi4+0x28a>
 8000cea:	d04e      	beq.n	8000d8a <__udivmoddi4+0x286>
 8000cec:	b155      	cbz	r5, 8000d04 <__udivmoddi4+0x200>
 8000cee:	ebb8 030e 	subs.w	r3, r8, lr
 8000cf2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cf6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cfa:	40cb      	lsrs	r3, r1
 8000cfc:	431e      	orrs	r6, r3
 8000cfe:	40cc      	lsrs	r4, r1
 8000d00:	e9c5 6400 	strd	r6, r4, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	e750      	b.n	8000baa <__udivmoddi4+0xa6>
 8000d08:	f1c2 0320 	rsb	r3, r2, #32
 8000d0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	fa24 f303 	lsr.w	r3, r4, r3
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	430c      	orrs	r4, r1
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d30:	0c23      	lsrs	r3, r4, #16
 8000d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d36:	fb00 f107 	mul.w	r1, r0, r7
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x24c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d46:	d22c      	bcs.n	8000da2 <__udivmoddi4+0x29e>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d92a      	bls.n	8000da2 <__udivmoddi4+0x29e>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d58:	fb08 3311 	mls	r3, r8, r1, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb01 f307 	mul.w	r3, r1, r7
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x276>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d70:	d213      	bcs.n	8000d9a <__udivmoddi4+0x296>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d911      	bls.n	8000d9a <__udivmoddi4+0x296>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4464      	add	r4, ip
 8000d7a:	1ae4      	subs	r4, r4, r3
 8000d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d80:	e739      	b.n	8000bf6 <__udivmoddi4+0xf2>
 8000d82:	4604      	mov	r4, r0
 8000d84:	e6f0      	b.n	8000b68 <__udivmoddi4+0x64>
 8000d86:	4608      	mov	r0, r1
 8000d88:	e706      	b.n	8000b98 <__udivmoddi4+0x94>
 8000d8a:	45c8      	cmp	r8, r9
 8000d8c:	d2ae      	bcs.n	8000cec <__udivmoddi4+0x1e8>
 8000d8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d96:	3801      	subs	r0, #1
 8000d98:	e7a8      	b.n	8000cec <__udivmoddi4+0x1e8>
 8000d9a:	4631      	mov	r1, r6
 8000d9c:	e7ed      	b.n	8000d7a <__udivmoddi4+0x276>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e799      	b.n	8000cd6 <__udivmoddi4+0x1d2>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e7d4      	b.n	8000d50 <__udivmoddi4+0x24c>
 8000da6:	46d6      	mov	lr, sl
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1a6>
 8000daa:	4463      	add	r3, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e74d      	b.n	8000c4c <__udivmoddi4+0x148>
 8000db0:	4606      	mov	r6, r0
 8000db2:	4623      	mov	r3, r4
 8000db4:	4608      	mov	r0, r1
 8000db6:	e70f      	b.n	8000bd8 <__udivmoddi4+0xd4>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	e730      	b.n	8000c20 <__udivmoddi4+0x11c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000dcc:	2254      	movs	r2, #84	@ 0x54
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <MPU6050_Init+0x1c>)
 8000dd2:	f004 fc75 	bl	80056c0 <memcpy>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000002c 	.word	0x2000002c

08000de4 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000df4:	23d0      	movs	r3, #208	@ 0xd0
 8000df6:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	f107 020c 	add.w	r2, r7, #12
 8000e04:	230a      	movs	r3, #10
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <I2C_Read+0x48>)
 8000e0c:	f002 f876 	bl	8002efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	b299      	uxth	r1, r3
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	2264      	movs	r2, #100	@ 0x64
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <I2C_Read+0x48>)
 8000e20:	f002 f96a 	bl	80030f8 <HAL_I2C_Master_Receive>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000002c 	.word	0x2000002c

08000e30 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000e48:	23d0      	movs	r3, #208	@ 0xd0
 8000e4a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	f107 020c 	add.w	r2, r7, #12
 8000e54:	2364      	movs	r3, #100	@ 0x64
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	4803      	ldr	r0, [pc, #12]	@ (8000e68 <I2C_Write8+0x38>)
 8000e5c:	f002 f84e 	bl	8002efc <HAL_I2C_Master_Transmit>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000002c 	.word	0x2000002c

08000e6c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	206b      	movs	r0, #107	@ 0x6b
 8000e7c:	f7ff ffd8 	bl	8000e30 <I2C_Write8>
	HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	@ 0x64
 8000e82:	f001 f89b 	bl	8001fbc <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	206b      	movs	r0, #107	@ 0x6b
 8000eae:	f7ff ffbf 	bl	8000e30 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000eb2:	2064      	movs	r0, #100	@ 0x64
 8000eb4:	f001 f882 	bl	8001fbc <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	78db      	ldrb	r3, [r3, #3]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	201a      	movs	r0, #26
 8000ecc:	f7ff ffb0 	bl	8000e30 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f003 0318 	and.w	r3, r3, #24
 8000ee0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	201b      	movs	r0, #27
 8000ee8:	f7ff ffa2 	bl	8000e30 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	789b      	ldrb	r3, [r3, #2]
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0318 	and.w	r3, r3, #24
 8000efc:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4619      	mov	r1, r3
 8000f02:	201c      	movs	r0, #28
 8000f04:	f7ff ff94 	bl	8000e30 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f000 f857 	bl	8000fbc <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d81a      	bhi.n	8000f4c <MPU6050_Config+0xe0>
 8000f16:	a201      	add	r2, pc, #4	@ (adr r2, 8000f1c <MPU6050_Config+0xb0>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f35 	.word	0x08000f35
 8000f24:	08000f3d 	.word	0x08000f3d
 8000f28:	08000f45 	.word	0x08000f45
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MPU6050_Config+0x12c>)
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f9c <MPU6050_Config+0x130>)
 8000f30:	601a      	str	r2, [r3, #0]
			break;
 8000f32:	e00c      	b.n	8000f4e <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000f34:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <MPU6050_Config+0x12c>)
 8000f36:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa0 <MPU6050_Config+0x134>)
 8000f38:	601a      	str	r2, [r3, #0]
				break;
 8000f3a:	e008      	b.n	8000f4e <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MPU6050_Config+0x12c>)
 8000f3e:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <MPU6050_Config+0x138>)
 8000f40:	601a      	str	r2, [r3, #0]
			break;
 8000f42:	e004      	b.n	8000f4e <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MPU6050_Config+0x12c>)
 8000f46:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <MPU6050_Config+0x13c>)
 8000f48:	601a      	str	r2, [r3, #0]
			break;
 8000f4a:	e000      	b.n	8000f4e <MPU6050_Config+0xe2>
		
		default:
			break;
 8000f4c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d81a      	bhi.n	8000f8c <MPU6050_Config+0x120>
 8000f56:	a201      	add	r2, pc, #4	@ (adr r2, 8000f5c <MPU6050_Config+0xf0>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f75 	.word	0x08000f75
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f85 	.word	0x08000f85
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MPU6050_Config+0x140>)
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <MPU6050_Config+0x144>)
 8000f70:	601a      	str	r2, [r3, #0]
			break;
 8000f72:	e00c      	b.n	8000f8e <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <MPU6050_Config+0x140>)
 8000f76:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <MPU6050_Config+0x148>)
 8000f78:	601a      	str	r2, [r3, #0]
				break;
 8000f7a:	e008      	b.n	8000f8e <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MPU6050_Config+0x140>)
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <MPU6050_Config+0x14c>)
 8000f80:	601a      	str	r2, [r3, #0]
			break;
 8000f82:	e004      	b.n	8000f8e <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MPU6050_Config+0x140>)
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <MPU6050_Config+0x130>)
 8000f88:	601a      	str	r2, [r3, #0]
			break;
 8000f8a:	e000      	b.n	8000f8e <MPU6050_Config+0x122>
		
		default:
			break;
 8000f8c:	bf00      	nop
	}
	
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000080 	.word	0x20000080
 8000f9c:	3d7a0000 	.word	0x3d7a0000
 8000fa0:	3dfa0000 	.word	0x3dfa0000
 8000fa4:	3e7a0000 	.word	0x3e7a0000
 8000fa8:	3efa0000 	.word	0x3efa0000
 8000fac:	20000084 	.word	0x20000084
 8000fb0:	3bfa0000 	.word	0x3bfa0000
 8000fb4:	3c7a0000 	.word	0x3c7a0000
 8000fb8:	3cfa0000 	.word	0x3cfa0000

08000fbc <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2019      	movs	r0, #25
 8000fcc:	f7ff ff30 	bl	8000e30 <I2C_Write8>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	203a      	movs	r0, #58	@ 0x3a
 8000fec:	f7ff fefa 	bl	8000de4 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8000ff0:	7f7b      	ldrb	r3, [r7, #29]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d043      	beq.n	800107e <MPU6050_Get_Accel_RawData+0xa6>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	203b      	movs	r0, #59	@ 0x3b
 8001000:	f7ff fef0 	bl	8000de4 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	7d7a      	ldrb	r2, [r7, #21]
 800100c:	4413      	add	r3, r2
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21a      	sxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001016:	7dbb      	ldrb	r3, [r7, #22]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	7dfa      	ldrb	r2, [r7, #23]
 800101e:	4413      	add	r3, r2
 8001020:	b29b      	uxth	r3, r3
 8001022:	b21a      	sxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001028:	7e3b      	ldrb	r3, [r7, #24]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	7e7a      	ldrb	r2, [r7, #25]
 8001030:	4413      	add	r3, r2
 8001032:	b29b      	uxth	r3, r3
 8001034:	b21a      	sxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2206      	movs	r2, #6
 8001040:	4619      	mov	r1, r3
 8001042:	2043      	movs	r0, #67	@ 0x43
 8001044:	f7ff fece 	bl	8000de4 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001048:	7b3b      	ldrb	r3, [r7, #12]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	7b7a      	ldrb	r2, [r7, #13]
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MPU6050_Get_Accel_RawData+0xb0>)
 8001058:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b29b      	uxth	r3, r3
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	4413      	add	r3, r2
 8001064:	b29b      	uxth	r3, r3
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <MPU6050_Get_Accel_RawData+0xb0>)
 800106a:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 800106c:	7c3b      	ldrb	r3, [r7, #16]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	7c7a      	ldrb	r2, [r7, #17]
 8001074:	4413      	add	r3, r2
 8001076:	b29b      	uxth	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <MPU6050_Get_Accel_RawData+0xb0>)
 800107c:	809a      	strh	r2, [r3, #4]
	}
}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000088 	.word	0x20000088

0800108c <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <MPU6050_Get_Gyro_RawData+0x34>)
 8001096:	f9b3 2000 	ldrsh.w	r2, [r3]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MPU6050_Get_Gyro_RawData+0x34>)
 80010a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <MPU6050_Get_Gyro_RawData+0x34>)
 80010aa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	809a      	strh	r2, [r3, #4]
	
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000088 	.word	0x20000088

080010c4 <cs43l22_unmute>:
			                                    1, &i2c_data, 1, 100);
	return status_i2c;
}

int cs43l22_unmute()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
	uint8_t i2c_data;
	HAL_StatusTypeDef status_i2c = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
	// unmute headphone A and B, page 52
	i2c_data = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADAVOL_REG,
 80010d2:	2364      	movs	r3, #100	@ 0x64
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2222      	movs	r2, #34	@ 0x22
 80010e2:	2194      	movs	r1, #148	@ 0x94
 80010e4:	4813      	ldr	r0, [pc, #76]	@ (8001134 <cs43l22_unmute+0x70>)
 80010e6:	f002 fa39 	bl	800355c <HAL_I2C_Mem_Write>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
		                                    1, &i2c_data, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADBVOL_REG,
 80010ee:	2364      	movs	r3, #100	@ 0x64
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	1dbb      	adds	r3, r7, #6
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	2223      	movs	r2, #35	@ 0x23
 80010fe:	2194      	movs	r1, #148	@ 0x94
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <cs43l22_unmute+0x70>)
 8001102:	f002 fa2b 	bl	800355c <HAL_I2C_Mem_Write>
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
			                                    1, &i2c_data, 1, 100);
	// turn on headphone
	i2c_data = 0xaf;
 800110a:	23af      	movs	r3, #175	@ 0xaf
 800110c:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2301      	movs	r3, #1
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	1dbb      	adds	r3, r7, #6
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2204      	movs	r2, #4
 800111e:	2194      	movs	r1, #148	@ 0x94
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <cs43l22_unmute+0x70>)
 8001122:	f002 fa1b 	bl	800355c <HAL_I2C_Mem_Write>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
				                                    1, &i2c_data, 1, 100);

	return status_i2c;
 800112a:	79fb      	ldrb	r3, [r7, #7]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000090 	.word	0x20000090

08001138 <cs43l22_init>:
codec_state get_cs43l22_state()
{
	return cs43l22_state;
}
int cs43l22_init()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2110      	movs	r1, #16
 8001146:	4853      	ldr	r0, [pc, #332]	@ (8001294 <cs43l22_init+0x15c>)
 8001148:	f001 fd7a 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800114c:	2064      	movs	r0, #100	@ 0x64
 800114e:	f000 ff35 	bl	8001fbc <HAL_Delay>
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2110      	movs	r1, #16
 8001156:	484f      	ldr	r0, [pc, #316]	@ (8001294 <cs43l22_init+0x15c>)
 8001158:	f001 fd72 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800115c:	2064      	movs	r0, #100	@ 0x64
 800115e:	f000 ff2d 	bl	8001fbc <HAL_Delay>
	// power off the codec, page 38
	i2c_data = 0x01;
 8001162:	2301      	movs	r3, #1
 8001164:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 8001166:	2364      	movs	r3, #100	@ 0x64
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	2194      	movs	r1, #148	@ 0x94
 8001178:	4847      	ldr	r0, [pc, #284]	@ (8001298 <cs43l22_init+0x160>)
 800117a:	f002 f9ef 	bl	800355c <HAL_I2C_Mem_Write>
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	                                    1, &i2c_data, 1, 100);

	// output device is headphone 0xaf, page 38
	i2c_data = 0b10101111;
 8001182:	23af      	movs	r3, #175	@ 0xaf
 8001184:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 8001186:	2364      	movs	r3, #100	@ 0x64
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2204      	movs	r2, #4
 8001196:	2194      	movs	r1, #148	@ 0x94
 8001198:	483f      	ldr	r0, [pc, #252]	@ (8001298 <cs43l22_init+0x160>)
 800119a:	f002 f9df 	bl	800355c <HAL_I2C_Mem_Write>
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <cs43l22_init+0x74>
	{
		return status_i2c;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	e06f      	b.n	800128c <cs43l22_init+0x154>
	}

	// clock auto-detect and divide mclk by 2
	i2c_data = 0b10000001;
 80011ac:	2381      	movs	r3, #129	@ 0x81
 80011ae:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_CLKCON_REG,
 80011b0:	2364      	movs	r3, #100	@ 0x64
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	1dbb      	adds	r3, r7, #6
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2205      	movs	r2, #5
 80011c0:	2194      	movs	r1, #148	@ 0x94
 80011c2:	4835      	ldr	r0, [pc, #212]	@ (8001298 <cs43l22_init+0x160>)
 80011c4:	f002 f9ca 	bl	800355c <HAL_I2C_Mem_Write>
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <cs43l22_init+0x9e>
	{
		return status_i2c;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	e05a      	b.n	800128c <cs43l22_init+0x154>
	}

	cs43l22_set_volume(200);
 80011d6:	20c8      	movs	r0, #200	@ 0xc8
 80011d8:	f000 f8a2 	bl	8001320 <cs43l22_set_volume>

	// i2s up to 24-bit interface, 16-bit data length, page 41
	i2c_data = 0b00000111;
 80011dc:	2307      	movs	r3, #7
 80011de:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_INTERCON1_REG,
 80011e0:	2364      	movs	r3, #100	@ 0x64
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	2301      	movs	r3, #1
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	1dbb      	adds	r3, r7, #6
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	2206      	movs	r2, #6
 80011f0:	2194      	movs	r1, #148	@ 0x94
 80011f2:	4829      	ldr	r0, [pc, #164]	@ (8001298 <cs43l22_init+0x160>)
 80011f4:	f002 f9b2 	bl	800355c <HAL_I2C_Mem_Write>
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <cs43l22_init+0xce>
	{
		return status_i2c;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	e042      	b.n	800128c <cs43l22_init+0x154>
	}

	// enable digital soft ramp and de-emphasis filter
	i2c_data = 0b00000110;
 8001206:	2306      	movs	r3, #6
 8001208:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MISCON_REG,
 800120a:	2364      	movs	r3, #100	@ 0x64
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	1dbb      	adds	r3, r7, #6
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	220e      	movs	r2, #14
 800121a:	2194      	movs	r1, #148	@ 0x94
 800121c:	481e      	ldr	r0, [pc, #120]	@ (8001298 <cs43l22_init+0x160>)
 800121e:	f002 f99d 	bl	800355c <HAL_I2C_Mem_Write>
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
											1, &i2c_data, 1, 100);
	if (status_i2c)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <cs43l22_init+0xf8>
	{
		return status_i2c;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	e02d      	b.n	800128c <cs43l22_init+0x154>
	}

	//  PCM VOlume adjust, page 47
	i2c_data = 0x00;
 8001230:	2300      	movs	r3, #0
 8001232:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMAVOLCON_REG,
 8001234:	2364      	movs	r3, #100	@ 0x64
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	1dbb      	adds	r3, r7, #6
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	221a      	movs	r2, #26
 8001244:	2194      	movs	r1, #148	@ 0x94
 8001246:	4814      	ldr	r0, [pc, #80]	@ (8001298 <cs43l22_init+0x160>)
 8001248:	f002 f988 	bl	800355c <HAL_I2C_Mem_Write>
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <cs43l22_init+0x122>
	{
		return status_i2c;
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	e018      	b.n	800128c <cs43l22_init+0x154>
	}

	i2c_data = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMBVOLCON_REG,
 800125e:	2364      	movs	r3, #100	@ 0x64
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	1dbb      	adds	r3, r7, #6
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	221b      	movs	r2, #27
 800126e:	2194      	movs	r1, #148	@ 0x94
 8001270:	4809      	ldr	r0, [pc, #36]	@ (8001298 <cs43l22_init+0x160>)
 8001272:	f002 f973 	bl	800355c <HAL_I2C_Mem_Write>
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <cs43l22_init+0x14c>
	{
		return status_i2c;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	e003      	b.n	800128c <cs43l22_init+0x154>
	}

	cs43l22_state = READY;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <cs43l22_init+0x164>)
 8001286:	2205      	movs	r2, #5
 8001288:	701a      	strb	r2, [r3, #0]
	return 0;
 800128a:	2300      	movs	r3, #0

}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020c00 	.word	0x40020c00
 8001298:	20000090 	.word	0x20000090
 800129c:	20000000 	.word	0x20000000

080012a0 <cs43l22_play>:

int cs43l22_play(int16_t *pbuffer, uint32_t size)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status_i2c = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
	uint8_t i2c_data;
	if (cs43l22_state != PLAY)
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <cs43l22_play+0x74>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d028      	beq.n	8001308 <cs43l22_play+0x68>
	{
		status_i2c = cs43l22_unmute();
 80012b6:	f7ff ff05 	bl	80010c4 <cs43l22_unmute>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
		if (status_i2c)
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <cs43l22_play+0x28>
		{
			return status_i2c;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	e020      	b.n	800130a <cs43l22_play+0x6a>
		}
		// powered up, page 38
		i2c_data = 0b10011110;
 80012c8:	239e      	movs	r3, #158	@ 0x9e
 80012ca:	73bb      	strb	r3, [r7, #14]
		status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 80012cc:	2364      	movs	r3, #100	@ 0x64
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	f107 030e 	add.w	r3, r7, #14
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	2202      	movs	r2, #2
 80012de:	2194      	movs	r1, #148	@ 0x94
 80012e0:	480d      	ldr	r0, [pc, #52]	@ (8001318 <cs43l22_play+0x78>)
 80012e2:	f002 f93b 	bl	800355c <HAL_I2C_Mem_Write>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73fb      	strb	r3, [r7, #15]
												1, &i2c_data, 1, 100);
		if (status_i2c)
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <cs43l22_play+0x54>
		{
			return status_i2c;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	e00a      	b.n	800130a <cs43l22_play+0x6a>
		}
		cs43l22_state = PLAY;
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <cs43l22_play+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
		HAL_I2S_Transmit_DMA(&CS43L22_I2S, (uint16_t * )pbuffer, size);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4806      	ldr	r0, [pc, #24]	@ (800131c <cs43l22_play+0x7c>)
 8001304:	f002 ff80 	bl	8004208 <HAL_I2S_Transmit_DMA>
	}
	return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000
 8001318:	20000090 	.word	0x20000090
 800131c:	200000e4 	.word	0x200000e4

08001320 <cs43l22_set_volume>:
	HAL_I2C_Mem_Read(&CS43L22_I2C, CS43L22_I2C_ADDRESS, reg,
			1, reg_value, 1, 100);
}

int cs43l22_set_volume(uint8_t volume)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af04      	add	r7, sp, #16
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status_i2c = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
	// page 52
	if (volume > 0xe6)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2be6      	cmp	r3, #230	@ 0xe6
 8001332:	d904      	bls.n	800133e <cs43l22_set_volume+0x1e>
	{
		volume -= 0xe7;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	3319      	adds	r3, #25
 8001338:	b2db      	uxtb	r3, r3
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	e003      	b.n	8001346 <cs43l22_set_volume+0x26>
	}
	else
	{
		volume += 0x19;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	3319      	adds	r3, #25
 8001342:	b2db      	uxtb	r3, r3
 8001344:	71fb      	strb	r3, [r7, #7]
	}
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASAVOL_REG,
 8001346:	2364      	movs	r3, #100	@ 0x64
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2220      	movs	r2, #32
 8001356:	2194      	movs	r1, #148	@ 0x94
 8001358:	480b      	ldr	r0, [pc, #44]	@ (8001388 <cs43l22_set_volume+0x68>)
 800135a:	f002 f8ff 	bl	800355c <HAL_I2C_Mem_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
											1, &volume, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASBVOL_REG,
 8001362:	2364      	movs	r3, #100	@ 0x64
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2301      	movs	r3, #1
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2221      	movs	r2, #33	@ 0x21
 8001372:	2194      	movs	r1, #148	@ 0x94
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <cs43l22_set_volume+0x68>)
 8001376:	f002 f8f1 	bl	800355c <HAL_I2C_Mem_Write>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
												1, &volume, 1, 100);
	return status_i2c;
 800137e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000090 	.word	0x20000090

0800138c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(hi2s == &CS43L22_I2S)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_I2S_TxCpltCallback+0x1c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_I2S_TxCpltCallback+0x14>
  {
	AUDIO_I2S_TxCpltCallback();
 800139c:	f000 f816 	bl	80013cc <AUDIO_I2S_TxCpltCallback>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200000e4 	.word	0x200000e4

080013ac <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(hi2s == &CS43L22_I2S)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d101      	bne.n	80013c0 <HAL_I2S_TxHalfCpltCallback+0x14>
  {

    AUDIO_I2S_TxHalfCpltCallback();
 80013bc:	f000 f80d 	bl	80013da <AUDIO_I2S_TxHalfCpltCallback>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000e4 	.word	0x200000e4

080013cc <AUDIO_I2S_TxCpltCallback>:
__weak void AUDIO_I2S_TxCpltCallback(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <AUDIO_I2S_TxHalfCpltCallback>:
__weak void AUDIO_I2S_TxHalfCpltCallback(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <change_freq>:
#define SAMPLING_RATE  48000
#define BUFFER_LENGTH  SAMPLING_RATE / SIN_FREQ
int16_t buffer_audio[2 * BUFFER_LENGTH];

void change_freq(int sound_freq)
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	  for(int i = 0; i < BUFFER_LENGTH;i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e07b      	b.n	80014ee <change_freq+0x106>
	    {
	        buffer_audio[2 * i] = 10000 * sin(2 * 3.14 * sound_freq * i / SAMPLING_RATE);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff f840 	bl	800047c <__aeabi_i2d>
 80013fc:	a342      	add	r3, pc, #264	@ (adr r3, 8001508 <change_freq+0x120>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f8a5 	bl	8000550 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4614      	mov	r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff f834 	bl	800047c <__aeabi_i2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7ff f898 	bl	8000550 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	a339      	add	r3, pc, #228	@ (adr r3, 8001510 <change_freq+0x128>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f9b9 	bl	80007a4 <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	ec43 2b17 	vmov	d7, r2, r3
 800143a:	eeb0 0a47 	vmov.f32	s0, s14
 800143e:	eef0 0a67 	vmov.f32	s1, s15
 8001442:	f004 f94d 	bl	80056e0 <sin>
 8001446:	ec51 0b10 	vmov	r0, r1, d0
 800144a:	a333      	add	r3, pc, #204	@ (adr r3, 8001518 <change_freq+0x130>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f87e 	bl	8000550 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	005c      	lsls	r4, r3, #1
 8001460:	f7ff fb10 	bl	8000a84 <__aeabi_d2iz>
 8001464:	4603      	mov	r3, r0
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <change_freq+0x138>)
 800146a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	        buffer_audio[2 * i + 1] = 10000 * sin(2 * 3.14 * sound_freq * i / SAMPLING_RATE);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff f804 	bl	800047c <__aeabi_i2d>
 8001474:	a324      	add	r3, pc, #144	@ (adr r3, 8001508 <change_freq+0x120>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f869 	bl	8000550 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4614      	mov	r4, r2
 8001484:	461d      	mov	r5, r3
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7fe fff8 	bl	800047c <__aeabi_i2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7ff f85c 	bl	8000550 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001510 <change_freq+0x128>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f97d 	bl	80007a4 <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	ec43 2b17 	vmov	d7, r2, r3
 80014b2:	eeb0 0a47 	vmov.f32	s0, s14
 80014b6:	eef0 0a67 	vmov.f32	s1, s15
 80014ba:	f004 f911 	bl	80056e0 <sin>
 80014be:	ec51 0b10 	vmov	r0, r1, d0
 80014c2:	a315      	add	r3, pc, #84	@ (adr r3, 8001518 <change_freq+0x130>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f842 	bl	8000550 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	1c5c      	adds	r4, r3, #1
 80014da:	f7ff fad3 	bl	8000a84 <__aeabi_d2iz>
 80014de:	4603      	mov	r3, r0
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <change_freq+0x138>)
 80014e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	  for(int i = 0; i < BUFFER_LENGTH;i++)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80014f4:	f6ff af7f 	blt.w	80013f6 <change_freq+0xe>
	    }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdb0      	pop	{r4, r5, r7, pc}
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	51eb851f 	.word	0x51eb851f
 800150c:	40191eb8 	.word	0x40191eb8
 8001510:	00000000 	.word	0x00000000
 8001514:	40e77000 	.word	0x40e77000
 8001518:	00000000 	.word	0x00000000
 800151c:	40c38800 	.word	0x40c38800
 8001520:	2000018c 	.word	0x2000018c

08001524 <get_max_abs_value>:

int16_t get_max_abs_value(int16_t x, int16_t y, int16_t z) {
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
 800152e:	460b      	mov	r3, r1
 8001530:	80bb      	strh	r3, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	807b      	strh	r3, [r7, #2]
    int16_t abs_x = abs(x);
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	2b00      	cmp	r3, #0
 800153c:	bfb8      	it	lt
 800153e:	425b      	neglt	r3, r3
 8001540:	b29b      	uxth	r3, r3
 8001542:	81bb      	strh	r3, [r7, #12]
    int16_t abs_y = abs(y);
 8001544:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfb8      	it	lt
 800154c:	425b      	neglt	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	817b      	strh	r3, [r7, #10]
    int16_t abs_z = abs(z);
 8001552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001556:	2b00      	cmp	r3, #0
 8001558:	bfb8      	it	lt
 800155a:	425b      	neglt	r3, r3
 800155c:	b29b      	uxth	r3, r3
 800155e:	813b      	strh	r3, [r7, #8]

    int16_t max_value = abs_x;
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	81fb      	strh	r3, [r7, #14]
    if (abs_y > max_value) {
 8001564:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156c:	429a      	cmp	r2, r3
 800156e:	dd01      	ble.n	8001574 <get_max_abs_value+0x50>
        max_value = abs_y;
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	81fb      	strh	r3, [r7, #14]
    }
    if (abs_z > max_value) {
 8001574:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157c:	429a      	cmp	r2, r3
 800157e:	dd01      	ble.n	8001584 <get_max_abs_value+0x60>
        max_value = abs_z;
 8001580:	893b      	ldrh	r3, [r7, #8]
 8001582:	81fb      	strh	r3, [r7, #14]
    }
    return max_value;
 8001584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159a:	f000 fc9d 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159e:	f000 f8d3 	bl	8001748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a2:	f000 f9b7 	bl	8001914 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a6:	f000 f995 	bl	80018d4 <MX_DMA_Init>
  MX_I2C1_Init();
 80015aa:	f000 f937 	bl	800181c <MX_I2C1_Init>
  MX_I2S3_Init();
 80015ae:	f000 f963 	bl	8001878 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  cs43l22_init();
 80015b2:	f7ff fdc1 	bl	8001138 <cs43l22_init>
  MPU6050_Init(&hi2c1);//pointer na we
 80015b6:	485b      	ldr	r0, [pc, #364]	@ (8001724 <main+0x190>)
 80015b8:	f7ff fc04 	bl	8000dc4 <MPU6050_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // playing the sound - ciągłe granie
  SoundGenMPU.Accel_Full_Scale = AFS_SEL_2g;
 80015bc:	2300      	movs	r3, #0
 80015be:	71bb      	strb	r3, [r7, #6]
  SoundGenMPU.ClockSource = Internal_8MHz;
 80015c0:	2300      	movs	r3, #0
 80015c2:	713b      	strb	r3, [r7, #4]
  SoundGenMPU.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80015c4:	2301      	movs	r3, #1
 80015c6:	71fb      	strb	r3, [r7, #7]
  SoundGenMPU.Gyro_Full_Scale = FS_SEL_500;
 80015c8:	2301      	movs	r3, #1
 80015ca:	717b      	strb	r3, [r7, #5]
  SoundGenMPU.Sleep_Mode_Bit = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	723b      	strb	r3, [r7, #8]
  MPU6050_Config(&SoundGenMPU);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc4a 	bl	8000e6c <MPU6050_Config>
  cs43l22_play(buffer_audio, 2 * BUFFER_LENGTH);
 80015d8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80015dc:	4852      	ldr	r0, [pc, #328]	@ (8001728 <main+0x194>)
 80015de:	f7ff fe5f 	bl	80012a0 <cs43l22_play>
  uint16_t freq = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	81fb      	strh	r3, [r7, #14]
  uint8_t mode = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	737b      	strb	r3, [r7, #13]
  while (1)
  {
      MPU6050_Get_Accel_RawData(&AccelRawData);
 80015ea:	4850      	ldr	r0, [pc, #320]	@ (800172c <main+0x198>)
 80015ec:	f7ff fcf4 	bl	8000fd8 <MPU6050_Get_Accel_RawData>
      MPU6050_Get_Gyro_RawData(&GyroRawData);
 80015f0:	484f      	ldr	r0, [pc, #316]	@ (8001730 <main+0x19c>)
 80015f2:	f7ff fd4b 	bl	800108c <MPU6050_Get_Gyro_RawData>

      if (HAL_GPIO_ReadPin(B1_PIN_GPIO_Port, B1_PIN_Pin))
 80015f6:	2101      	movs	r1, #1
 80015f8:	484e      	ldr	r0, [pc, #312]	@ (8001734 <main+0x1a0>)
 80015fa:	f001 fb09 	bl	8002c10 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01e      	beq.n	8001642 <main+0xae>
      {
          HAL_Delay(10);
 8001604:	200a      	movs	r0, #10
 8001606:	f000 fcd9 	bl	8001fbc <HAL_Delay>
          if (HAL_GPIO_ReadPin(B1_PIN_GPIO_Port, B1_PIN_Pin))
 800160a:	2101      	movs	r1, #1
 800160c:	4849      	ldr	r0, [pc, #292]	@ (8001734 <main+0x1a0>)
 800160e:	f001 faff 	bl	8002c10 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d014      	beq.n	8001642 <main+0xae>
          {
              mode = (mode + 1) % 3; // Zmiana trybu
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	4b46      	ldr	r3, [pc, #280]	@ (8001738 <main+0x1a4>)
 800161e:	fb83 3102 	smull	r3, r1, r3, r2
 8001622:	17d3      	asrs	r3, r2, #31
 8001624:	1ac9      	subs	r1, r1, r3
 8001626:	460b      	mov	r3, r1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	440b      	add	r3, r1
 800162c:	1ad1      	subs	r1, r2, r3
 800162e:	460b      	mov	r3, r1
 8001630:	737b      	strb	r3, [r7, #13]
              while (HAL_GPIO_ReadPin(B1_PIN_GPIO_Port, B1_PIN_Pin));
 8001632:	bf00      	nop
 8001634:	2101      	movs	r1, #1
 8001636:	483f      	ldr	r0, [pc, #252]	@ (8001734 <main+0x1a0>)
 8001638:	f001 faea 	bl	8002c10 <HAL_GPIO_ReadPin>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f8      	bne.n	8001634 <main+0xa0>
          }
      }

      switch (mode)
 8001642:	7b7b      	ldrb	r3, [r7, #13]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d03a      	beq.n	80016be <main+0x12a>
 8001648:	2b02      	cmp	r3, #2
 800164a:	dc63      	bgt.n	8001714 <main+0x180>
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <main+0xc2>
 8001650:	2b01      	cmp	r3, #1
 8001652:	d00d      	beq.n	8001670 <main+0xdc>
 8001654:	e05e      	b.n	8001714 <main+0x180>
      {
          case 0:
              freq = abs(GyroRawData.x); // Tryb 1: wykorzystanie osi X
 8001656:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <main+0x19c>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	2b00      	cmp	r3, #0
 800165e:	bfb8      	it	lt
 8001660:	425b      	neglt	r3, r3
 8001662:	81fb      	strh	r3, [r7, #14]
              if (freq < 100) freq = 100;
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	2b63      	cmp	r3, #99	@ 0x63
 8001668:	d84f      	bhi.n	800170a <main+0x176>
 800166a:	2364      	movs	r3, #100	@ 0x64
 800166c:	81fb      	strh	r3, [r7, #14]
              break;
 800166e:	e04c      	b.n	800170a <main+0x176>
          case 1:
        	  static uint16_t prev_freq = 0;
        	  uint16_t new_freq = get_max_abs_value(GyroRawData.x, GyroRawData.y, GyroRawData.z) / 10;
 8001670:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <main+0x19c>)
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	4a2e      	ldr	r2, [pc, #184]	@ (8001730 <main+0x19c>)
 8001678:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800167c:	4a2c      	ldr	r2, [pc, #176]	@ (8001730 <main+0x19c>)
 800167e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff4e 	bl	8001524 <get_max_abs_value>
 8001688:	4603      	mov	r3, r0
 800168a:	4a2c      	ldr	r2, [pc, #176]	@ (800173c <main+0x1a8>)
 800168c:	fb82 1203 	smull	r1, r2, r2, r3
 8001690:	1092      	asrs	r2, r2, #2
 8001692:	17db      	asrs	r3, r3, #31
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b21b      	sxth	r3, r3
 8001698:	817b      	strh	r3, [r7, #10]
        	  freq = (prev_freq + new_freq) / 2;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <main+0x1ac>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	4413      	add	r3, r2
 80016a4:	0fda      	lsrs	r2, r3, #31
 80016a6:	4413      	add	r3, r2
 80016a8:	105b      	asrs	r3, r3, #1
 80016aa:	81fb      	strh	r3, [r7, #14]
        	  prev_freq = freq;
 80016ac:	4a24      	ldr	r2, [pc, #144]	@ (8001740 <main+0x1ac>)
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	8013      	strh	r3, [r2, #0]
        	  if (freq < 100) freq = 100; // Tryb 2: smooth - uśrednianie
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	2b63      	cmp	r3, #99	@ 0x63
 80016b6:	d82a      	bhi.n	800170e <main+0x17a>
 80016b8:	2364      	movs	r3, #100	@ 0x64
 80016ba:	81fb      	strh	r3, [r7, #14]
              break;
 80016bc:	e027      	b.n	800170e <main+0x17a>
          case 2:
              freq = (abs(GyroRawData.x) + abs(GyroRawData.y) + abs(GyroRawData.z)) / (3*10); // Tryb 3: zaniżona średnia z osi
 80016be:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <main+0x19c>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bfb8      	it	lt
 80016c8:	425b      	neglt	r3, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <main+0x19c>)
 80016d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bfb8      	it	lt
 80016d8:	425b      	neglt	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <main+0x19c>)
 80016e0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	bfb8      	it	lt
 80016e8:	4252      	neglt	r2, r2
 80016ea:	b292      	uxth	r2, r2
 80016ec:	4413      	add	r3, r2
 80016ee:	4a15      	ldr	r2, [pc, #84]	@ (8001744 <main+0x1b0>)
 80016f0:	fb82 1203 	smull	r1, r2, r2, r3
 80016f4:	441a      	add	r2, r3
 80016f6:	1112      	asrs	r2, r2, #4
 80016f8:	17db      	asrs	r3, r3, #31
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	81fb      	strh	r3, [r7, #14]
              if (freq < 100) freq = 100;
 80016fe:	89fb      	ldrh	r3, [r7, #14]
 8001700:	2b63      	cmp	r3, #99	@ 0x63
 8001702:	d806      	bhi.n	8001712 <main+0x17e>
 8001704:	2364      	movs	r3, #100	@ 0x64
 8001706:	81fb      	strh	r3, [r7, #14]
              break;
 8001708:	e003      	b.n	8001712 <main+0x17e>
              break;
 800170a:	bf00      	nop
 800170c:	e002      	b.n	8001714 <main+0x180>
              break;
 800170e:	bf00      	nop
 8001710:	e000      	b.n	8001714 <main+0x180>
              break;
 8001712:	bf00      	nop
      }
      change_freq(freq);
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe66 	bl	80013e8 <change_freq>
      HAL_Delay(10);
 800171c:	200a      	movs	r0, #10
 800171e:	f000 fc4d 	bl	8001fbc <HAL_Delay>
      MPU6050_Get_Accel_RawData(&AccelRawData);
 8001722:	e762      	b.n	80015ea <main+0x56>
 8001724:	20000090 	.word	0x20000090
 8001728:	2000018c 	.word	0x2000018c
 800172c:	2000090c 	.word	0x2000090c
 8001730:	20000914 	.word	0x20000914
 8001734:	40020000 	.word	0x40020000
 8001738:	55555556 	.word	0x55555556
 800173c:	66666667 	.word	0x66666667
 8001740:	2000091a 	.word	0x2000091a
 8001744:	88888889 	.word	0x88888889

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	@ 0x50
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2230      	movs	r2, #48	@ 0x30
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f003 ff86 	bl	8005668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <SystemClock_Config+0xcc>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	@ 0x40
 800177c:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <SystemClock_Config+0xcc>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a21      	ldr	r2, [pc, #132]	@ (8001818 <SystemClock_Config+0xd0>)
 8001792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <SystemClock_Config+0xd0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ac:	2310      	movs	r3, #16
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2302      	movs	r3, #2
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b8:	2308      	movs	r3, #8
 80017ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017bc:	23c0      	movs	r3, #192	@ 0xc0
 80017be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80017c4:	2308      	movs	r3, #8
 80017c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 f975 	bl	8004abc <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017d8:	f000 f9c8 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e0:	2302      	movs	r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2103      	movs	r1, #3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fbd6 	bl	8004fac <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001806:	f000 f9b1 	bl	8001b6c <Error_Handler>
  }
}
 800180a:	bf00      	nop
 800180c:	3750      	adds	r7, #80	@ 0x50
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_I2C1_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <MX_I2C1_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_I2C1_Init+0x50>)
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <MX_I2C1_Init+0x58>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_I2C1_Init+0x50>)
 800183a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <MX_I2C1_Init+0x50>)
 800185a:	f001 fa0b 	bl	8002c74 <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 f982 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000090 	.word	0x20000090
 8001870:	40005400 	.word	0x40005400
 8001874:	000186a0 	.word	0x000186a0

08001878 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_I2S3_Init+0x54>)
 800187e:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <MX_I2S3_Init+0x58>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_I2S3_Init+0x54>)
 8001884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001888:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_LSB;
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_I2S3_Init+0x54>)
 800188c:	2220      	movs	r2, #32
 800188e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_I2S3_Init+0x54>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <MX_I2S3_Init+0x54>)
 8001898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800189c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_I2S3_Init+0x54>)
 80018a0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80018a4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_I2S3_Init+0x54>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_I2S3_Init+0x54>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_I2S3_Init+0x54>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_I2S3_Init+0x54>)
 80018ba:	f002 fb65 	bl	8003f88 <HAL_I2S_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80018c4:	f000 f952 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200000e4 	.word	0x200000e4
 80018d0:	40003c00 	.word	0x40003c00

080018d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_DMA_Init+0x3c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001910 <MX_DMA_Init+0x3c>)
 80018e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_DMA_Init+0x3c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2010      	movs	r0, #16
 80018fc:	f000 fc5d 	bl	80021ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001900:	2010      	movs	r0, #16
 8001902:	f000 fc76 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b89      	ldr	r3, [pc, #548]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a88      	ldr	r2, [pc, #544]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b86      	ldr	r3, [pc, #536]	@ (8001b54 <MX_GPIO_Init+0x240>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	4b82      	ldr	r3, [pc, #520]	@ (8001b54 <MX_GPIO_Init+0x240>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a81      	ldr	r2, [pc, #516]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b7f      	ldr	r3, [pc, #508]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b7b      	ldr	r3, [pc, #492]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a7a      	ldr	r2, [pc, #488]	@ (8001b54 <MX_GPIO_Init+0x240>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b78      	ldr	r3, [pc, #480]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b74      	ldr	r3, [pc, #464]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a73      	ldr	r2, [pc, #460]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b71      	ldr	r3, [pc, #452]	@ (8001b54 <MX_GPIO_Init+0x240>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b54 <MX_GPIO_Init+0x240>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001b54 <MX_GPIO_Init+0x240>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001b54 <MX_GPIO_Init+0x240>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b66      	ldr	r3, [pc, #408]	@ (8001b54 <MX_GPIO_Init+0x240>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a65      	ldr	r2, [pc, #404]	@ (8001b54 <MX_GPIO_Init+0x240>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b63      	ldr	r3, [pc, #396]	@ (8001b54 <MX_GPIO_Init+0x240>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2108      	movs	r1, #8
 80019d6:	4860      	ldr	r0, [pc, #384]	@ (8001b58 <MX_GPIO_Init+0x244>)
 80019d8:	f001 f932 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	2101      	movs	r1, #1
 80019e0:	485e      	ldr	r0, [pc, #376]	@ (8001b5c <MX_GPIO_Init+0x248>)
 80019e2:	f001 f92d 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80019e6:	2200      	movs	r2, #0
 80019e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80019ec:	485c      	ldr	r0, [pc, #368]	@ (8001b60 <MX_GPIO_Init+0x24c>)
 80019ee:	f001 f927 	bl	8002c40 <HAL_GPIO_WritePin>
                          |CS43L22_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019f2:	2304      	movs	r3, #4
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4854      	ldr	r0, [pc, #336]	@ (8001b58 <MX_GPIO_Init+0x244>)
 8001a06:	f000 ff7f 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	484d      	ldr	r0, [pc, #308]	@ (8001b58 <MX_GPIO_Init+0x244>)
 8001a22:	f000 ff71 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001a26:	2332      	movs	r3, #50	@ 0x32
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a2a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4847      	ldr	r0, [pc, #284]	@ (8001b58 <MX_GPIO_Init+0x244>)
 8001a3c:	f000 ff64 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4841      	ldr	r0, [pc, #260]	@ (8001b5c <MX_GPIO_Init+0x248>)
 8001a58:	f000 ff56 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4839      	ldr	r0, [pc, #228]	@ (8001b5c <MX_GPIO_Init+0x248>)
 8001a78:	f000 ff46 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_PIN_Pin */
  GPIO_InitStruct.Pin = B1_PIN_Pin;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a80:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_PIN_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4834      	ldr	r0, [pc, #208]	@ (8001b64 <MX_GPIO_Init+0x250>)
 8001a92:	f000 ff39 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a96:	23e0      	movs	r3, #224	@ 0xe0
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	482c      	ldr	r0, [pc, #176]	@ (8001b64 <MX_GPIO_Init+0x250>)
 8001ab2:	f000 ff29 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001ab6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac8:	2305      	movs	r3, #5
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4825      	ldr	r0, [pc, #148]	@ (8001b68 <MX_GPIO_Init+0x254>)
 8001ad4:	f000 ff18 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           CS43L22_RESET_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ad8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001adc:	61fb      	str	r3, [r7, #28]
                          |CS43L22_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	481b      	ldr	r0, [pc, #108]	@ (8001b60 <MX_GPIO_Init+0x24c>)
 8001af2:	f000 ff09 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001af6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4816      	ldr	r0, [pc, #88]	@ (8001b64 <MX_GPIO_Init+0x250>)
 8001b0c:	f000 fefc 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001b10:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b22:	230a      	movs	r3, #10
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <MX_GPIO_Init+0x250>)
 8001b2e:	f000 feeb 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b32:	2320      	movs	r3, #32
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4806      	ldr	r0, [pc, #24]	@ (8001b60 <MX_GPIO_Init+0x24c>)
 8001b46:	f000 fedf 	bl	8002908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	@ 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <Error_Handler+0x8>

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bb6:	2007      	movs	r0, #7
 8001bb8:	f000 faf4 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_I2C_MspInit+0x84>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12c      	bne.n	8001c44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <HAL_I2C_MspInit+0x8c>)
 8001c24:	f000 fe70 	bl	8002908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b090      	sub	sp, #64	@ 0x40
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a4e      	ldr	r2, [pc, #312]	@ (8001dc0 <HAL_I2S_MspInit+0x168>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	f040 8095 	bne.w	8001db8 <HAL_I2S_MspInit+0x160>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001c92:	23c8      	movs	r3, #200	@ 0xc8
 8001c94:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001c96:	2305      	movs	r3, #5
 8001c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fb8e 	bl	80053c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001cae:	f7ff ff5d 	bl	8001b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a42      	ldr	r2, [pc, #264]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b40      	ldr	r3, [pc, #256]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b39      	ldr	r3, [pc, #228]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b35      	ldr	r3, [pc, #212]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a34      	ldr	r2, [pc, #208]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b32      	ldr	r3, [pc, #200]	@ (8001dc4 <HAL_I2S_MspInit+0x16c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d06:	2310      	movs	r3, #16
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d16:	2306      	movs	r3, #6
 8001d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4829      	ldr	r0, [pc, #164]	@ (8001dc8 <HAL_I2S_MspInit+0x170>)
 8001d22:	f000 fdf1 	bl	8002908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d26:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d38:	2306      	movs	r3, #6
 8001d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d40:	4619      	mov	r1, r3
 8001d42:	4822      	ldr	r0, [pc, #136]	@ (8001dcc <HAL_I2S_MspInit+0x174>)
 8001d44:	f000 fde0 	bl	8002908 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d4a:	4a22      	ldr	r2, [pc, #136]	@ (8001dd4 <HAL_I2S_MspInit+0x17c>)
 8001d4c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d56:	2240      	movs	r2, #64	@ 0x40
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d6e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d76:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d7e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001d8c:	4810      	ldr	r0, [pc, #64]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001d8e:	f000 fa4b 	bl	8002228 <HAL_DMA_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 8001d98:	f7ff fee8 	bl	8001b6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001da0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001da2:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd0 <HAL_I2S_MspInit+0x178>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	2033      	movs	r0, #51	@ 0x33
 8001dae:	f000 fa04 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001db2:	2033      	movs	r0, #51	@ 0x33
 8001db4:	f000 fa1d 	bl	80021f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001db8:	bf00      	nop
 8001dba:	3740      	adds	r7, #64	@ 0x40
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40003c00 	.word	0x40003c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	2000012c 	.word	0x2000012c
 8001dd4:	40026088 	.word	0x40026088

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <NMI_Handler+0x4>

08001de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <MemManage_Handler+0x4>

08001df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <UsageFault_Handler+0x4>

08001e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2e:	f000 f8a5 	bl	8001f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001e3c:	4802      	ldr	r0, [pc, #8]	@ (8001e48 <DMA1_Stream5_IRQHandler+0x10>)
 8001e3e:	f000 faf9 	bl	8002434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000012c 	.word	0x2000012c

08001e4c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <SPI3_IRQHandler+0x10>)
 8001e52:	f002 fa7d 	bl	8004350 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200000e4 	.word	0x200000e4

08001e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <SystemInit+0x20>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6a:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <SystemInit+0x20>)
 8001e6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ebc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e88:	f7ff ffea 	bl	8001e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e8c:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e8e:	490d      	ldr	r1, [pc, #52]	@ (8001ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f003 fbe1 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb6:	f7ff fb6d 	bl	8001594 <main>
  bx  lr    
 8001eba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ec8:	08006960 	.word	0x08006960
  ldr r2, =_sbss
 8001ecc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ed0:	20000920 	.word	0x20000920

08001ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC_IRQHandler>
	...

08001ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001edc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f18 <HAL_Init+0x40>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_Init+0x40>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <HAL_Init+0x40>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 f94f 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f808 	bl	8001f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0c:	f7ff fe34 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023c00 	.word	0x40023c00

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_InitTick+0x54>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_InitTick+0x58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f967 	bl	800220e <HAL_SYSTICK_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00e      	b.n	8001f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0f      	cmp	r3, #15
 8001f4e:	d80a      	bhi.n	8001f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f000 f92f 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f5c:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <HAL_InitTick+0x5c>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000004 	.word	0x20000004
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	20000008 	.word	0x20000008

08001f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_IncTick+0x20>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_IncTick+0x24>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <HAL_IncTick+0x24>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	2000000c 	.word	0x2000000c
 8001fa0:	2000091c 	.word	0x2000091c

08001fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <HAL_GetTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000091c 	.word	0x2000091c

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff ffee 	bl	8001fa4 <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d005      	beq.n	8001fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <HAL_Delay+0x44>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe2:	bf00      	nop
 8001fe4:	f7ff ffde 	bl	8001fa4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d8f7      	bhi.n	8001fe4 <HAL_Delay+0x28>
  {
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	@ (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	@ (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	@ (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	@ 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	@ 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f7ff ff8e 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff29 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff3e 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff8e 	bl	80020f8 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff31 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff feb6 	bl	8001fa4 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff fe9d 	bl	8001fa4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	@ (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fa6f 	bl	8002810 <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	@ 0x40
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa26 	bl	80027a4 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	223f      	movs	r2, #63	@ 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x26>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e040      	b.n	800242c <HAL_DMA_Start_IT+0xa8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12f      	bne.n	800241e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9b8 	bl	8002748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	223f      	movs	r2, #63	@ 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0216 	orr.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e005      	b.n	800242a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002440:	4b8e      	ldr	r3, [pc, #568]	@ (800267c <HAL_DMA_IRQHandler+0x248>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a8e      	ldr	r2, [pc, #568]	@ (8002680 <HAL_DMA_IRQHandler+0x24c>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	2208      	movs	r2, #8
 8002460:	409a      	lsls	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01a      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	2208      	movs	r2, #8
 800248e:	409a      	lsls	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	2201      	movs	r2, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	2204      	movs	r2, #4
 80024dc:	409a      	lsls	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	2204      	movs	r2, #4
 80024fa:	409a      	lsls	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f043 0204 	orr.w	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	2210      	movs	r2, #16
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d043      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03c      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252e:	2210      	movs	r2, #16
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d018      	beq.n	8002576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d024      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
 8002562:	e01f      	b.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
 8002574:	e016      	b.n	80025a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0208 	bic.w	r2, r2, #8
 8002592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	2220      	movs	r2, #32
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 808f 	beq.w	80026d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8087 	beq.w	80026d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2220      	movs	r2, #32
 80025cc:	409a      	lsls	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d136      	bne.n	800264c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0216 	bic.w	r2, r2, #22
 80025ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_DMA_IRQHandler+0x1da>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	223f      	movs	r2, #63	@ 0x3f
 8002624:	409a      	lsls	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263e:	2b00      	cmp	r3, #0
 8002640:	d07e      	beq.n	8002740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
        }
        return;
 800264a:	e079      	b.n	8002740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01d      	beq.n	8002696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266c:	2b00      	cmp	r3, #0
 800266e:	d031      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
 8002678:	e02c      	b.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
 800267a:	bf00      	nop
 800267c:	20000004 	.word	0x20000004
 8002680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e01e      	b.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10f      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0210 	bic.w	r2, r2, #16
 80026b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d022      	beq.n	800272e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2205      	movs	r2, #5
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3301      	adds	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	d307      	bcc.n	800271c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f2      	bne.n	8002700 <HAL_DMA_IRQHandler+0x2cc>
 800271a:	e000      	b.n	800271e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800271c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
 800273e:	e000      	b.n	8002742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002740:	bf00      	nop
    }
  }
}
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b40      	cmp	r3, #64	@ 0x40
 8002774:	d108      	bne.n	8002788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002786:	e007      	b.n	8002798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3b10      	subs	r3, #16
 80027b4:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <DMA_CalcBaseAndBitshift+0x64>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <DMA_CalcBaseAndBitshift+0x68>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d909      	bls.n	80027e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	1d1a      	adds	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80027e4:	e007      	b.n	80027f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	aaaaaaab 	.word	0xaaaaaaab
 800280c:	08006770 	.word	0x08006770

08002810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11f      	bne.n	800286a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d856      	bhi.n	80028de <DMA_CheckFifoParam+0xce>
 8002830:	a201      	add	r2, pc, #4	@ (adr r2, 8002838 <DMA_CheckFifoParam+0x28>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002849 	.word	0x08002849
 800283c:	0800285b 	.word	0x0800285b
 8002840:	08002849 	.word	0x08002849
 8002844:	080028df 	.word	0x080028df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d046      	beq.n	80028e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e043      	b.n	80028e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002862:	d140      	bne.n	80028e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e03d      	b.n	80028e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002872:	d121      	bne.n	80028b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d837      	bhi.n	80028ea <DMA_CheckFifoParam+0xda>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <DMA_CheckFifoParam+0x70>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002891 	.word	0x08002891
 8002884:	08002897 	.word	0x08002897
 8002888:	08002891 	.word	0x08002891
 800288c:	080028a9 	.word	0x080028a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e030      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d025      	beq.n	80028ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a6:	e022      	b.n	80028ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028b0:	d11f      	bne.n	80028f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028b6:	e01c      	b.n	80028f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d903      	bls.n	80028c6 <DMA_CheckFifoParam+0xb6>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d003      	beq.n	80028cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028c4:	e018      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ca:	e015      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e00b      	b.n	80028f6 <DMA_CheckFifoParam+0xe6>
      break;
 80028de:	bf00      	nop
 80028e0:	e00a      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e008      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e006      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e004      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028f6:	bf00      	nop
    }
  } 
  
  return status; 
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	@ 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	e159      	b.n	8002bd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8148 	bne.w	8002bd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d005      	beq.n	800295a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002956:	2b02      	cmp	r3, #2
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d017      	beq.n	80029f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d123      	bne.n	8002a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	08da      	lsrs	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3208      	adds	r2, #8
 8002a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	08da      	lsrs	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3208      	adds	r2, #8
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0203 	and.w	r2, r3, #3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a2 	beq.w	8002bd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b57      	ldr	r3, [pc, #348]	@ (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	4a56      	ldr	r2, [pc, #344]	@ (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9e:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aaa:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_GPIO_Init+0x2ec>)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a49      	ldr	r2, [pc, #292]	@ (8002bf8 <HAL_GPIO_Init+0x2f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d019      	beq.n	8002b0a <HAL_GPIO_Init+0x202>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a48      	ldr	r2, [pc, #288]	@ (8002bfc <HAL_GPIO_Init+0x2f4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0x1fe>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a47      	ldr	r2, [pc, #284]	@ (8002c00 <HAL_GPIO_Init+0x2f8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00d      	beq.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a46      	ldr	r2, [pc, #280]	@ (8002c04 <HAL_GPIO_Init+0x2fc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x1f6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a45      	ldr	r2, [pc, #276]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_GPIO_Init+0x1f2>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e008      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002afa:	2307      	movs	r3, #7
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e004      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e002      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f002 0203 	and.w	r2, r2, #3
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4093      	lsls	r3, r2
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b1c:	4935      	ldr	r1, [pc, #212]	@ (8002bf4 <HAL_GPIO_Init+0x2ec>)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2a:	4b38      	ldr	r3, [pc, #224]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b78:	4a24      	ldr	r2, [pc, #144]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b7e:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c0c <HAL_GPIO_Init+0x304>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	f67f aea2 	bls.w	8002924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3724      	adds	r7, #36	@ 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	40020800 	.word	0x40020800
 8002c04:	40020c00 	.word	0x40020c00
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e001      	b.n	8002c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e12b      	b.n	8002ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe ff94 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f002 fb60 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8002cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a81      	ldr	r2, [pc, #516]	@ (8002ee8 <HAL_I2C_Init+0x274>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d807      	bhi.n	8002cf8 <HAL_I2C_Init+0x84>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a80      	ldr	r2, [pc, #512]	@ (8002eec <HAL_I2C_Init+0x278>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	bf94      	ite	ls
 8002cf0:	2301      	movls	r3, #1
 8002cf2:	2300      	movhi	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e006      	b.n	8002d06 <HAL_I2C_Init+0x92>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ef0 <HAL_I2C_Init+0x27c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	bf94      	ite	ls
 8002d00:	2301      	movls	r3, #1
 8002d02:	2300      	movhi	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0e7      	b.n	8002ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a78      	ldr	r2, [pc, #480]	@ (8002ef4 <HAL_I2C_Init+0x280>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0c9b      	lsrs	r3, r3, #18
 8002d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee8 <HAL_I2C_Init+0x274>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d802      	bhi.n	8002d48 <HAL_I2C_Init+0xd4>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3301      	adds	r3, #1
 8002d46:	e009      	b.n	8002d5c <HAL_I2C_Init+0xe8>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	4a69      	ldr	r2, [pc, #420]	@ (8002ef8 <HAL_I2C_Init+0x284>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	495c      	ldr	r1, [pc, #368]	@ (8002ee8 <HAL_I2C_Init+0x274>)
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	d819      	bhi.n	8002db0 <HAL_I2C_Init+0x13c>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e59      	subs	r1, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8a:	1c59      	adds	r1, r3, #1
 8002d8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d90:	400b      	ands	r3, r1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_I2C_Init+0x138>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e59      	subs	r1, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002daa:	e051      	b.n	8002e50 <HAL_I2C_Init+0x1dc>
 8002dac:	2304      	movs	r3, #4
 8002dae:	e04f      	b.n	8002e50 <HAL_I2C_Init+0x1dc>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d111      	bne.n	8002ddc <HAL_I2C_Init+0x168>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e012      	b.n	8002e02 <HAL_I2C_Init+0x18e>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1e58      	subs	r0, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	0099      	lsls	r1, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Init+0x196>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e022      	b.n	8002e50 <HAL_I2C_Init+0x1dc>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10e      	bne.n	8002e30 <HAL_I2C_Init+0x1bc>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1e58      	subs	r0, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	440b      	add	r3, r1
 8002e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2e:	e00f      	b.n	8002e50 <HAL_I2C_Init+0x1dc>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	6809      	ldr	r1, [r1, #0]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6911      	ldr	r1, [r2, #16]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68d2      	ldr	r2, [r2, #12]
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	000186a0 	.word	0x000186a0
 8002eec:	001e847f 	.word	0x001e847f
 8002ef0:	003d08ff 	.word	0x003d08ff
 8002ef4:	431bde83 	.word	0x431bde83
 8002ef8:	10624dd3 	.word	0x10624dd3

08002efc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	461a      	mov	r2, r3
 8002f08:	460b      	mov	r3, r1
 8002f0a:	817b      	strh	r3, [r7, #10]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff f848 	bl	8001fa4 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	f040 80e0 	bne.w	80030e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2319      	movs	r3, #25
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4970      	ldr	r1, [pc, #448]	@ (80030f0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fdf4 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0d3      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_I2C_Master_Transmit+0x50>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0cc      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x1ea>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d007      	beq.n	8002f72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	893a      	ldrh	r2, [r7, #8]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a50      	ldr	r2, [pc, #320]	@ (80030f4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fbc8 	bl	8003750 <I2C_MasterRequestWrite>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e08d      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fe0:	e066      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 feb2 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d107      	bne.n	800300a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06b      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d11b      	bne.n	8003084 <HAL_I2C_Master_Transmit+0x188>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d017      	beq.n	8003084 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	6a39      	ldr	r1, [r7, #32]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fea9 	bl	8003de0 <I2C_WaitOnBTFFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00d      	beq.n	80030b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e01a      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d194      	bne.n	8002fe2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	00100002 	.word	0x00100002
 80030f4:	ffff0000 	.word	0xffff0000

080030f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	@ 0x30
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	461a      	mov	r2, r3
 8003104:	460b      	mov	r3, r1
 8003106:	817b      	strh	r3, [r7, #10]
 8003108:	4613      	mov	r3, r2
 800310a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7fe ff4a 	bl	8001fa4 <HAL_GetTick>
 8003110:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	f040 8217 	bne.w	800354e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2319      	movs	r3, #25
 8003126:	2201      	movs	r2, #1
 8003128:	497c      	ldr	r1, [pc, #496]	@ (800331c <HAL_I2C_Master_Receive+0x224>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fcf6 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	e20a      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_I2C_Master_Receive+0x50>
 8003144:	2302      	movs	r3, #2
 8003146:	e203      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d007      	beq.n	800316e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2222      	movs	r2, #34	@ 0x22
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2210      	movs	r2, #16
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	893a      	ldrh	r2, [r7, #8]
 800319e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a5c      	ldr	r2, [pc, #368]	@ (8003320 <HAL_I2C_Master_Receive+0x228>)
 80031ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fb4c 	bl	8003854 <I2C_MasterRequestRead>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e1c4      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d113      	bne.n	80031f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	623b      	str	r3, [r7, #32]
 80031e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e198      	b.n	8003528 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d11b      	bne.n	8003236 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e178      	b.n	8003528 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	2b02      	cmp	r3, #2
 800323c:	d11b      	bne.n	8003276 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800324c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	e158      	b.n	8003528 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800329c:	e144      	b.n	8003528 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	f200 80f1 	bhi.w	800348a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d123      	bne.n	80032f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fddb 	bl	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e145      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032f6:	e117      	b.n	8003528 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d14e      	bne.n	800339e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003306:	2200      	movs	r2, #0
 8003308:	4906      	ldr	r1, [pc, #24]	@ (8003324 <HAL_I2C_Master_Receive+0x22c>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fc06 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e11a      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
 800331a:	bf00      	nop
 800331c:	00100002 	.word	0x00100002
 8003320:	ffff0000 	.word	0xffff0000
 8003324:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800339c:	e0c4      	b.n	8003528 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a4:	2200      	movs	r2, #0
 80033a6:	496c      	ldr	r1, [pc, #432]	@ (8003558 <HAL_I2C_Master_Receive+0x460>)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fbb7 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0cb      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	2200      	movs	r2, #0
 8003402:	4955      	ldr	r1, [pc, #340]	@ (8003558 <HAL_I2C_Master_Receive+0x460>)
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fb89 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e09d      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003488:	e04e      	b.n	8003528 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fcee 	bl	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e058      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d124      	bne.n	8003528 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d107      	bne.n	80034f6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f aeb6 	bne.w	800329e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	@ 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	00010004 	.word	0x00010004

0800355c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	4603      	mov	r3, r0
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	460b      	mov	r3, r1
 8003570:	813b      	strh	r3, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003576:	f7fe fd15 	bl	8001fa4 <HAL_GetTick>
 800357a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b20      	cmp	r3, #32
 8003586:	f040 80d9 	bne.w	800373c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2319      	movs	r3, #25
 8003590:	2201      	movs	r2, #1
 8003592:	496d      	ldr	r1, [pc, #436]	@ (8003748 <HAL_I2C_Mem_Write+0x1ec>)
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fac1 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0cc      	b.n	800373e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Mem_Write+0x56>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0c5      	b.n	800373e <HAL_I2C_Mem_Write+0x1e2>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d007      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2221      	movs	r2, #33	@ 0x21
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2240      	movs	r2, #64	@ 0x40
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a3a      	ldr	r2, [r7, #32]
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a4d      	ldr	r2, [pc, #308]	@ (800374c <HAL_I2C_Mem_Write+0x1f0>)
 8003618:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800361a:	88f8      	ldrh	r0, [r7, #6]
 800361c:	893a      	ldrh	r2, [r7, #8]
 800361e:	8979      	ldrh	r1, [r7, #10]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4603      	mov	r3, r0
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f9e0 	bl	80039f0 <I2C_RequestMemoryWrite>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d052      	beq.n	80036dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e081      	b.n	800373e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fb86 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	2b04      	cmp	r3, #4
 8003650:	d107      	bne.n	8003662 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e06b      	b.n	800373e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d11b      	bne.n	80036dc <HAL_I2C_Mem_Write+0x180>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d017      	beq.n	80036dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1aa      	bne.n	800363a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fb79 	bl	8003de0 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e016      	b.n	800373e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	00100002 	.word	0x00100002
 800374c:	ffff0000 	.word	0xffff0000

08003750 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	460b      	mov	r3, r1
 800375e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d006      	beq.n	800377a <I2C_MasterRequestWrite+0x2a>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d003      	beq.n	800377a <I2C_MasterRequestWrite+0x2a>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003778:	d108      	bne.n	800378c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e00b      	b.n	80037a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003790:	2b12      	cmp	r3, #18
 8003792:	d107      	bne.n	80037a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f9b3 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00d      	beq.n	80037d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ca:	d103      	bne.n	80037d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e035      	b.n	8003844 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e0:	d108      	bne.n	80037f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037f0:	611a      	str	r2, [r3, #16]
 80037f2:	e01b      	b.n	800382c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037f4:	897b      	ldrh	r3, [r7, #10]
 80037f6:	11db      	asrs	r3, r3, #7
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f003 0306 	and.w	r3, r3, #6
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f063 030f 	orn	r3, r3, #15
 8003804:	b2da      	uxtb	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	490e      	ldr	r1, [pc, #56]	@ (800384c <I2C_MasterRequestWrite+0xfc>)
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f9fc 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e010      	b.n	8003844 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4907      	ldr	r1, [pc, #28]	@ (8003850 <I2C_MasterRequestWrite+0x100>)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f9ec 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	00010008 	.word	0x00010008
 8003850:	00010002 	.word	0x00010002

08003854 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003878:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d006      	beq.n	800388e <I2C_MasterRequestRead+0x3a>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d003      	beq.n	800388e <I2C_MasterRequestRead+0x3a>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800388c:	d108      	bne.n	80038a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e00b      	b.n	80038b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	2b11      	cmp	r3, #17
 80038a6:	d107      	bne.n	80038b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f929 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038de:	d103      	bne.n	80038e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e079      	b.n	80039e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f4:	d108      	bne.n	8003908 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038f6:	897b      	ldrh	r3, [r7, #10]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	611a      	str	r2, [r3, #16]
 8003906:	e05f      	b.n	80039c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003908:	897b      	ldrh	r3, [r7, #10]
 800390a:	11db      	asrs	r3, r3, #7
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 0306 	and.w	r3, r3, #6
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f063 030f 	orn	r3, r3, #15
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4930      	ldr	r1, [pc, #192]	@ (80039e8 <I2C_MasterRequestRead+0x194>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f972 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e054      	b.n	80039e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003936:	897b      	ldrh	r3, [r7, #10]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4929      	ldr	r1, [pc, #164]	@ (80039ec <I2C_MasterRequestRead+0x198>)
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f962 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e044      	b.n	80039e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f8c7 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a2:	d103      	bne.n	80039ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e017      	b.n	80039e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039b0:	897b      	ldrh	r3, [r7, #10]
 80039b2:	11db      	asrs	r3, r3, #7
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0306 	and.w	r3, r3, #6
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f063 030e 	orn	r3, r3, #14
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4907      	ldr	r1, [pc, #28]	@ (80039ec <I2C_MasterRequestRead+0x198>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f91e 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	00010008 	.word	0x00010008
 80039ec:	00010002 	.word	0x00010002

080039f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f878 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a40:	d103      	bne.n	8003a4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e05f      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	492d      	ldr	r1, [pc, #180]	@ (8003b18 <I2C_RequestMemoryWrite+0x128>)
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f8d3 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e04c      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8c:	6a39      	ldr	r1, [r7, #32]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f95e 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d107      	bne.n	8003ab2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e02b      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	611a      	str	r2, [r3, #16]
 8003ac6:	e021      	b.n	8003b0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f938 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d107      	bne.n	8003afe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e005      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b02:	893b      	ldrh	r3, [r7, #8]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	00010002 	.word	0x00010002

08003b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b2c:	e048      	b.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d044      	beq.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fe fa35 	bl	8001fa4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d139      	bne.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d10d      	bne.n	8003b72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	e00c      	b.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d116      	bne.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e023      	b.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10d      	bne.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	e00c      	b.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d093      	beq.n	8003b2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c1e:	e071      	b.n	8003d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2e:	d123      	bne.n	8003c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	f043 0204 	orr.w	r2, r3, #4
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e067      	b.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d041      	beq.n	8003d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c80:	f7fe f990 	bl	8001fa4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d302      	bcc.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d136      	bne.n	8003d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10c      	bne.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4013      	ands	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e00b      	b.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	43da      	mvns	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e021      	b.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	0c1b      	lsrs	r3, r3, #16
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10c      	bne.n	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	43da      	mvns	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e00b      	b.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4013      	ands	r3, r2
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	bf14      	ite	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	2300      	moveq	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f47f af6d 	bne.w	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5c:	e034      	b.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f8e3 	bl	8003f2a <I2C_IsAcknowledgeFailed>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e034      	b.n	8003dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d028      	beq.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe f915 	bl	8001fa4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11d      	bne.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d96:	2b80      	cmp	r3, #128	@ 0x80
 8003d98:	d016      	beq.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b80      	cmp	r3, #128	@ 0x80
 8003dd4:	d1c3      	bne.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dec:	e034      	b.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f89b 	bl	8003f2a <I2C_IsAcknowledgeFailed>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e034      	b.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d028      	beq.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e06:	f7fe f8cd 	bl	8001fa4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11d      	bne.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d016      	beq.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e007      	b.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d1c3      	bne.n	8003dee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e7c:	e049      	b.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d119      	bne.n	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0210 	mvn.w	r2, #16
 8003e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e030      	b.n	8003f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec0:	f7fe f870 	bl	8001fa4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11d      	bne.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d016      	beq.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e007      	b.n	8003f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d1ae      	bne.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f40:	d11b      	bne.n	8003f7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	f043 0204 	orr.w	r2, r3, #4
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e128      	b.n	80041ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a90      	ldr	r2, [pc, #576]	@ (80041f4 <HAL_I2S_Init+0x26c>)
 8003fb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fd fe4f 	bl	8001c58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003fd0:	f023 030f 	bic.w	r3, r3, #15
 8003fd4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d060      	beq.n	80040a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003fee:	2310      	movs	r3, #16
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e001      	b.n	8003ff8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d802      	bhi.n	8004006 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004006:	2001      	movs	r0, #1
 8004008:	f001 facc 	bl	80055a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800400c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004016:	d125      	bne.n	8004064 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d010      	beq.n	8004042 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	fbb2 f2f3 	udiv	r2, r2, r3
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	3305      	adds	r3, #5
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e01f      	b.n	8004082 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	fbb2 f2f3 	udiv	r2, r2, r3
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	3305      	adds	r3, #5
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e00e      	b.n	8004082 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fbb2 f2f3 	udiv	r2, r2, r3
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	3305      	adds	r3, #5
 8004080:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a5c      	ldr	r2, [pc, #368]	@ (80041f8 <HAL_I2S_Init+0x270>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	08db      	lsrs	r3, r3, #3
 800408c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e003      	b.n	80040b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80040a8:	2302      	movs	r3, #2
 80040aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d902      	bls.n	80040bc <HAL_I2S_Init+0x134>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2bff      	cmp	r3, #255	@ 0xff
 80040ba:	d907      	bls.n	80040cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	f043 0210 	orr.w	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e08f      	b.n	80041ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	ea42 0103 	orr.w	r1, r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	430a      	orrs	r2, r1
 80040de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040ea:	f023 030f 	bic.w	r3, r3, #15
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6851      	ldr	r1, [r2, #4]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	4311      	orrs	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68d2      	ldr	r2, [r2, #12]
 80040fc:	4311      	orrs	r1, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6992      	ldr	r2, [r2, #24]
 8004102:	430a      	orrs	r2, r1
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800410e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d161      	bne.n	80041dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a38      	ldr	r2, [pc, #224]	@ (80041fc <HAL_I2S_Init+0x274>)
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a37      	ldr	r2, [pc, #220]	@ (8004200 <HAL_I2S_Init+0x278>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_I2S_Init+0x1a4>
 8004128:	4b36      	ldr	r3, [pc, #216]	@ (8004204 <HAL_I2S_Init+0x27c>)
 800412a:	e001      	b.n	8004130 <HAL_I2S_Init+0x1a8>
 800412c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	4932      	ldr	r1, [pc, #200]	@ (8004200 <HAL_I2S_Init+0x278>)
 8004138:	428a      	cmp	r2, r1
 800413a:	d101      	bne.n	8004140 <HAL_I2S_Init+0x1b8>
 800413c:	4a31      	ldr	r2, [pc, #196]	@ (8004204 <HAL_I2S_Init+0x27c>)
 800413e:	e001      	b.n	8004144 <HAL_I2S_Init+0x1bc>
 8004140:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004144:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004148:	f023 030f 	bic.w	r3, r3, #15
 800414c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2b      	ldr	r2, [pc, #172]	@ (8004200 <HAL_I2S_Init+0x278>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <HAL_I2S_Init+0x1d4>
 8004158:	4b2a      	ldr	r3, [pc, #168]	@ (8004204 <HAL_I2S_Init+0x27c>)
 800415a:	e001      	b.n	8004160 <HAL_I2S_Init+0x1d8>
 800415c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004160:	2202      	movs	r2, #2
 8004162:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a25      	ldr	r2, [pc, #148]	@ (8004200 <HAL_I2S_Init+0x278>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_I2S_Init+0x1ea>
 800416e:	4b25      	ldr	r3, [pc, #148]	@ (8004204 <HAL_I2S_Init+0x27c>)
 8004170:	e001      	b.n	8004176 <HAL_I2S_Init+0x1ee>
 8004172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004182:	d003      	beq.n	800418c <HAL_I2S_Init+0x204>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800418c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e001      	b.n	8004198 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041a2:	4313      	orrs	r3, r2
 80041a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	4313      	orrs	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80041c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004200 <HAL_I2S_Init+0x278>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_I2S_Init+0x24c>
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <HAL_I2S_Init+0x27c>)
 80041d2:	e001      	b.n	80041d8 <HAL_I2S_Init+0x250>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d8:	897a      	ldrh	r2, [r7, #10]
 80041da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	080044f5 	.word	0x080044f5
 80041f8:	cccccccd 	.word	0xcccccccd
 80041fc:	08004609 	.word	0x08004609
 8004200:	40003800 	.word	0x40003800
 8004204:	40003400 	.word	0x40003400

08004208 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_I2S_Transmit_DMA+0x1a>
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e08a      	b.n	800433c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d001      	beq.n	8004236 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	e082      	b.n	800433c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_I2S_Transmit_DMA+0x3e>
 8004242:	2302      	movs	r3, #2
 8004244:	e07a      	b.n	800433c <HAL_I2S_Transmit_DMA+0x134>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2203      	movs	r2, #3
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d002      	beq.n	800427a <HAL_I2S_Transmit_DMA+0x72>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b05      	cmp	r3, #5
 8004278:	d10a      	bne.n	8004290 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800428e:	e005      	b.n	800429c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a0:	4a28      	ldr	r2, [pc, #160]	@ (8004344 <HAL_I2S_Transmit_DMA+0x13c>)
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	4a27      	ldr	r2, [pc, #156]	@ (8004348 <HAL_I2S_Transmit_DMA+0x140>)
 80042aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	4a26      	ldr	r2, [pc, #152]	@ (800434c <HAL_I2S_Transmit_DMA+0x144>)
 80042b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80042bc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80042c4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80042cc:	f7fe f85a 	bl	8002384 <HAL_DMA_Start_IT>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f043 0208 	orr.w	r2, r3, #8
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e022      	b.n	800433c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0202 	orr.w	r2, r2, #2
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004338:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	080043d3 	.word	0x080043d3
 8004348:	08004391 	.word	0x08004391
 800434c:	080043ef 	.word	0x080043ef

08004350 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10e      	bne.n	80043c4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0202 	bic.w	r2, r2, #2
 80043b4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7fc ffe1 	bl	800138c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043de:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7fc ffe3 	bl	80013ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0203 	bic.w	r2, r2, #3
 800440a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	f043 0208 	orr.w	r2, r3, #8
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff ffa5 	bl	800437c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10e      	bne.n	800448e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800447e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fc ff7f 	bl	800138c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	b292      	uxth	r2, r2
 80044aa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10e      	bne.n	80044ec <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ff3e 	bl	8004368 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b04      	cmp	r3, #4
 800450e:	d13a      	bne.n	8004586 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d109      	bne.n	800452e <I2S_IRQHandler+0x3a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d102      	bne.n	800452e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffb4 	bl	8004496 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d126      	bne.n	8004586 <I2S_IRQHandler+0x92>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b20      	cmp	r3, #32
 8004544:	d11f      	bne.n	8004586 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004554:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	f043 0202 	orr.w	r2, r3, #2
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fefb 	bl	800437c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b03      	cmp	r3, #3
 8004590:	d136      	bne.n	8004600 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d109      	bne.n	80045b0 <I2S_IRQHandler+0xbc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a6:	2b80      	cmp	r3, #128	@ 0x80
 80045a8:	d102      	bne.n	80045b0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff ff45 	bl	800443a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d122      	bne.n	8004600 <I2S_IRQHandler+0x10c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d11b      	bne.n	8004600 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045d6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff febe 	bl	800437c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004600:	bf00      	nop
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a92      	ldr	r2, [pc, #584]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004622:	4b92      	ldr	r3, [pc, #584]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004624:	e001      	b.n	800462a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004626:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a8b      	ldr	r2, [pc, #556]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004640:	4b8a      	ldr	r3, [pc, #552]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004642:	e001      	b.n	8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004644:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004654:	d004      	beq.n	8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8099 	bne.w	8004792 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d107      	bne.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f925 	bl	80048c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9c8 	bl	8004a24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d13a      	bne.n	8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d035      	beq.n	8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80046b2:	4b6e      	ldr	r3, [pc, #440]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046b4:	e001      	b.n	80046ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80046b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4969      	ldr	r1, [pc, #420]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046c2:	428b      	cmp	r3, r1
 80046c4:	d101      	bne.n	80046ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80046c6:	4b69      	ldr	r3, [pc, #420]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c8:	e001      	b.n	80046ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80046ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	f043 0202 	orr.w	r2, r3, #2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fe34 	bl	800437c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b08      	cmp	r3, #8
 800471c:	f040 80c3 	bne.w	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80bd 	beq.w	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800473a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a49      	ldr	r2, [pc, #292]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004746:	4b49      	ldr	r3, [pc, #292]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004748:	e001      	b.n	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800474a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4944      	ldr	r1, [pc, #272]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004756:	428b      	cmp	r3, r1
 8004758:	d101      	bne.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800475a:	4b44      	ldr	r3, [pc, #272]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800475c:	e001      	b.n	8004762 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800475e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004762:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004766:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	f043 0204 	orr.w	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fdf6 	bl	800437c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004790:	e089      	b.n	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d107      	bne.n	80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8be 	bl	8004928 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d107      	bne.n	80047c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8fd 	bl	80049c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047cc:	2b40      	cmp	r3, #64	@ 0x40
 80047ce:	d12f      	bne.n	8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d02a      	beq.n	8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047f4:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047f6:	e001      	b.n	80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4919      	ldr	r1, [pc, #100]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004804:	428b      	cmp	r3, r1
 8004806:	d101      	bne.n	800480c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800480a:	e001      	b.n	8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800480c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004810:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004814:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fda6 	bl	800437c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b08      	cmp	r3, #8
 8004838:	d136      	bne.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d031      	beq.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a07      	ldr	r2, [pc, #28]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800484e:	4b07      	ldr	r3, [pc, #28]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004850:	e001      	b.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004852:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4902      	ldr	r1, [pc, #8]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800485e:	428b      	cmp	r3, r1
 8004860:	d106      	bne.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004862:	4b02      	ldr	r3, [pc, #8]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004864:	e006      	b.n	8004874 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004866:	bf00      	nop
 8004868:	40003800 	.word	0x40003800
 800486c:	40003400 	.word	0x40003400
 8004870:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004874:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004878:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004888:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fd6c 	bl	800437c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048a4:	e000      	b.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048a6:	bf00      	nop
}
 80048a8:	bf00      	nop
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c99      	adds	r1, r3, #2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80048d6:	881a      	ldrh	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d113      	bne.n	800491e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004904:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff ffc9 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	1c99      	adds	r1, r3, #2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6251      	str	r1, [r2, #36]	@ 0x24
 800493a:	8819      	ldrh	r1, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <I2SEx_TxISR_I2SExt+0x22>
 8004946:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <I2SEx_TxISR_I2SExt+0x94>)
 8004948:	e001      	b.n	800494e <I2SEx_TxISR_I2SExt+0x26>
 800494a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800494e:	460a      	mov	r2, r1
 8004950:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d121      	bne.n	80049ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <I2SEx_TxISR_I2SExt+0x50>
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <I2SEx_TxISR_I2SExt+0x94>)
 8004976:	e001      	b.n	800497c <I2SEx_TxISR_I2SExt+0x54>
 8004978:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	490d      	ldr	r1, [pc, #52]	@ (80049b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004984:	428b      	cmp	r3, r1
 8004986:	d101      	bne.n	800498c <I2SEx_TxISR_I2SExt+0x64>
 8004988:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <I2SEx_TxISR_I2SExt+0x94>)
 800498a:	e001      	b.n	8004990 <I2SEx_TxISR_I2SExt+0x68>
 800498c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004990:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004994:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff81 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40003800 	.word	0x40003800
 80049bc:	40003400 	.word	0x40003400

080049c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68d8      	ldr	r0, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	1c99      	adds	r1, r3, #2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80049d8:	b282      	uxth	r2, r0
 80049da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d113      	bne.n	8004a1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff4a 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a20      	ldr	r2, [pc, #128]	@ (8004ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <I2SEx_RxISR_I2SExt+0x16>
 8004a36:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8004a38:	e001      	b.n	8004a3e <I2SEx_RxISR_I2SExt+0x1a>
 8004a3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a3e:	68d8      	ldr	r0, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	1c99      	adds	r1, r3, #2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a4a:	b282      	uxth	r2, r0
 8004a4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d121      	bne.n	8004aaa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	@ (8004ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <I2SEx_RxISR_I2SExt+0x50>
 8004a70:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8004a72:	e001      	b.n	8004a78 <I2SEx_RxISR_I2SExt+0x54>
 8004a74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	490d      	ldr	r1, [pc, #52]	@ (8004ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8004a80:	428b      	cmp	r3, r1
 8004a82:	d101      	bne.n	8004a88 <I2SEx_RxISR_I2SExt+0x64>
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8004a86:	e001      	b.n	8004a8c <I2SEx_RxISR_I2SExt+0x68>
 8004a88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff03 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40003800 	.word	0x40003800
 8004ab8:	40003400 	.word	0x40003400

08004abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e267      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ada:	4b88      	ldr	r3, [pc, #544]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4b85      	ldr	r3, [pc, #532]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d112      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b82      	ldr	r3, [pc, #520]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4b7e      	ldr	r3, [pc, #504]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x108>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e242      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x74>
 8004b22:	4b76      	ldr	r3, [pc, #472]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a75      	ldr	r2, [pc, #468]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e01d      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x98>
 8004b3a:	4b70      	ldr	r3, [pc, #448]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6f      	ldr	r2, [pc, #444]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b6d      	ldr	r3, [pc, #436]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b54:	4b69      	ldr	r3, [pc, #420]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a68      	ldr	r2, [pc, #416]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b66      	ldr	r3, [pc, #408]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a65      	ldr	r2, [pc, #404]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fd fa16 	bl	8001fa4 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd fa12 	bl	8001fa4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e207      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0xc0>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fa02 	bl	8001fa4 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd f9fe 	bl	8001fa4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1f3      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	4b51      	ldr	r3, [pc, #324]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0xe8>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b47      	ldr	r3, [pc, #284]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b44      	ldr	r3, [pc, #272]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	4b41      	ldr	r3, [pc, #260]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c7      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4937      	ldr	r1, [pc, #220]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b34      	ldr	r3, [pc, #208]	@ (8004d00 <HAL_RCC_OscConfig+0x244>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fd f9b7 	bl	8001fa4 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fd f9b3 	bl	8001fa4 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1a8      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b28      	ldr	r3, [pc, #160]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4925      	ldr	r1, [pc, #148]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b24      	ldr	r3, [pc, #144]	@ (8004d00 <HAL_RCC_OscConfig+0x244>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd f996 	bl	8001fa4 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd f992 	bl	8001fa4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e187      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d036      	beq.n	8004d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <HAL_RCC_OscConfig+0x248>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd f976 	bl	8001fa4 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fd f972 	bl	8001fa4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e167      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x200>
 8004cda:	e01b      	b.n	8004d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cdc:	4b09      	ldr	r3, [pc, #36]	@ (8004d04 <HAL_RCC_OscConfig+0x248>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd f95f 	bl	8001fa4 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	e00e      	b.n	8004d08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fd f95b 	bl	8001fa4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d907      	bls.n	8004d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e150      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	42470000 	.word	0x42470000
 8004d04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	4b88      	ldr	r3, [pc, #544]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ea      	bne.n	8004cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8097 	beq.w	8004e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b81      	ldr	r3, [pc, #516]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	4b7d      	ldr	r3, [pc, #500]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d42:	4b7a      	ldr	r3, [pc, #488]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d52:	4b77      	ldr	r3, [pc, #476]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d118      	bne.n	8004d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5e:	4b74      	ldr	r3, [pc, #464]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a73      	ldr	r2, [pc, #460]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6a:	f7fd f91b 	bl	8001fa4 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d72:	f7fd f917 	bl	8001fa4 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e10c      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	4b6a      	ldr	r3, [pc, #424]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x2ea>
 8004d98:	4b64      	ldr	r3, [pc, #400]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	4a63      	ldr	r2, [pc, #396]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da4:	e01c      	b.n	8004de0 <HAL_RCC_OscConfig+0x324>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x30c>
 8004dae:	4b5f      	ldr	r3, [pc, #380]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004db4:	f043 0304 	orr.w	r3, r3, #4
 8004db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dba:	4b5c      	ldr	r3, [pc, #368]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCC_OscConfig+0x324>
 8004dc8:	4b58      	ldr	r3, [pc, #352]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dcc:	4a57      	ldr	r2, [pc, #348]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd4:	4b55      	ldr	r3, [pc, #340]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd8:	4a54      	ldr	r2, [pc, #336]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dda:	f023 0304 	bic.w	r3, r3, #4
 8004dde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd f8dc 	bl	8001fa4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd f8d8 	bl	8001fa4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e0cb      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e06:	4b49      	ldr	r3, [pc, #292]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0ee      	beq.n	8004df0 <HAL_RCC_OscConfig+0x334>
 8004e12:	e014      	b.n	8004e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e14:	f7fd f8c6 	bl	8001fa4 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1a:	e00a      	b.n	8004e32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1c:	f7fd f8c2 	bl	8001fa4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e0b5      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e32:	4b3e      	ldr	r3, [pc, #248]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1ee      	bne.n	8004e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d105      	bne.n	8004e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e44:	4b39      	ldr	r3, [pc, #228]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	4a38      	ldr	r2, [pc, #224]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80a1 	beq.w	8004f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e5a:	4b34      	ldr	r3, [pc, #208]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d05c      	beq.n	8004f20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d141      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6e:	4b31      	ldr	r3, [pc, #196]	@ (8004f34 <HAL_RCC_OscConfig+0x478>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fd f896 	bl	8001fa4 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fd f892 	bl	8001fa4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e087      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8e:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	019b      	lsls	r3, r3, #6
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	061b      	lsls	r3, r3, #24
 8004ebe:	491b      	ldr	r1, [pc, #108]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <HAL_RCC_OscConfig+0x478>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fd f86b 	bl	8001fa4 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fd f867 	bl	8001fa4 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e05c      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee4:	4b11      	ldr	r3, [pc, #68]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x416>
 8004ef0:	e054      	b.n	8004f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <HAL_RCC_OscConfig+0x478>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fd f854 	bl	8001fa4 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fd f850 	bl	8001fa4 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e045      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x444>
 8004f1e:	e03d      	b.n	8004f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e038      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40007000 	.word	0x40007000
 8004f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d028      	beq.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d121      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d11a      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d111      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	3b01      	subs	r3, #1
 8004f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0cc      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b68      	ldr	r3, [pc, #416]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d90c      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b65      	ldr	r3, [pc, #404]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0b8      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b59      	ldr	r3, [pc, #356]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a58      	ldr	r2, [pc, #352]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800500a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005018:	4b53      	ldr	r3, [pc, #332]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a52      	ldr	r2, [pc, #328]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b50      	ldr	r3, [pc, #320]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	494d      	ldr	r1, [pc, #308]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d044      	beq.n	80050cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d119      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	2b03      	cmp	r3, #3
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b3f      	ldr	r3, [pc, #252]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b3b      	ldr	r3, [pc, #236]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e067      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4934      	ldr	r1, [pc, #208]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fc ff82 	bl	8001fa4 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fc ff7e 	bl	8001fa4 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b25      	ldr	r3, [pc, #148]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d20c      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b22      	ldr	r3, [pc, #136]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b20      	ldr	r3, [pc, #128]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e032      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005100:	4b19      	ldr	r3, [pc, #100]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4916      	ldr	r1, [pc, #88]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800511e:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	490e      	ldr	r1, [pc, #56]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005132:	f000 f821 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005136:	4602      	mov	r2, r0
 8005138:	4b0b      	ldr	r3, [pc, #44]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	490a      	ldr	r1, [pc, #40]	@ (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	5ccb      	ldrb	r3, [r1, r3]
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	4a09      	ldr	r2, [pc, #36]	@ (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800514e:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc fee2 	bl	8001f1c <HAL_InitTick>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00
 8005168:	40023800 	.word	0x40023800
 800516c:	08006758 	.word	0x08006758
 8005170:	20000004 	.word	0x20000004
 8005174:	20000008 	.word	0x20000008

08005178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800517c:	b094      	sub	sp, #80	@ 0x50
 800517e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005190:	4b79      	ldr	r3, [pc, #484]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d00d      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x40>
 800519c:	2b08      	cmp	r3, #8
 800519e:	f200 80e1 	bhi.w	8005364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x34>
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051aa:	e0db      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4b73      	ldr	r3, [pc, #460]	@ (800537c <HAL_RCC_GetSysClockFreq+0x204>)
 80051ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051b0:	e0db      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051b2:	4b73      	ldr	r3, [pc, #460]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x208>)
 80051b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051b6:	e0d8      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d063      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	099b      	lsrs	r3, r3, #6
 80051d4:	2200      	movs	r2, #0
 80051d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e2:	2300      	movs	r3, #0
 80051e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	f04f 0000 	mov.w	r0, #0
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	0159      	lsls	r1, r3, #5
 80051f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051fc:	0150      	lsls	r0, r2, #5
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4621      	mov	r1, r4
 8005204:	1a51      	subs	r1, r2, r1
 8005206:	6139      	str	r1, [r7, #16]
 8005208:	4629      	mov	r1, r5
 800520a:	eb63 0301 	sbc.w	r3, r3, r1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800521c:	4659      	mov	r1, fp
 800521e:	018b      	lsls	r3, r1, #6
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005226:	4651      	mov	r1, sl
 8005228:	018a      	lsls	r2, r1, #6
 800522a:	4651      	mov	r1, sl
 800522c:	ebb2 0801 	subs.w	r8, r2, r1
 8005230:	4659      	mov	r1, fp
 8005232:	eb63 0901 	sbc.w	r9, r3, r1
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800524a:	4690      	mov	r8, r2
 800524c:	4699      	mov	r9, r3
 800524e:	4623      	mov	r3, r4
 8005250:	eb18 0303 	adds.w	r3, r8, r3
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	462b      	mov	r3, r5
 8005258:	eb49 0303 	adc.w	r3, r9, r3
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800526a:	4629      	mov	r1, r5
 800526c:	024b      	lsls	r3, r1, #9
 800526e:	4621      	mov	r1, r4
 8005270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005274:	4621      	mov	r1, r4
 8005276:	024a      	lsls	r2, r1, #9
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800527e:	2200      	movs	r2, #0
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005288:	f7fb fc24 	bl	8000ad4 <__aeabi_uldivmod>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4613      	mov	r3, r2
 8005292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005294:	e058      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005296:	4b38      	ldr	r3, [pc, #224]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	2200      	movs	r2, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	4611      	mov	r1, r2
 80052a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	2300      	movs	r3, #0
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	0159      	lsls	r1, r3, #5
 80052be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c2:	0150      	lsls	r0, r2, #5
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4641      	mov	r1, r8
 80052ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ce:	4649      	mov	r1, r9
 80052d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052e8:	ebb2 040a 	subs.w	r4, r2, sl
 80052ec:	eb63 050b 	sbc.w	r5, r3, fp
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	00eb      	lsls	r3, r5, #3
 80052fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052fe:	00e2      	lsls	r2, r4, #3
 8005300:	4614      	mov	r4, r2
 8005302:	461d      	mov	r5, r3
 8005304:	4643      	mov	r3, r8
 8005306:	18e3      	adds	r3, r4, r3
 8005308:	603b      	str	r3, [r7, #0]
 800530a:	464b      	mov	r3, r9
 800530c:	eb45 0303 	adc.w	r3, r5, r3
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800531e:	4629      	mov	r1, r5
 8005320:	028b      	lsls	r3, r1, #10
 8005322:	4621      	mov	r1, r4
 8005324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005328:	4621      	mov	r1, r4
 800532a:	028a      	lsls	r2, r1, #10
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005332:	2200      	movs	r2, #0
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	61fa      	str	r2, [r7, #28]
 8005338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800533c:	f7fb fbca 	bl	8000ad4 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4613      	mov	r3, r2
 8005346:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005348:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	3301      	adds	r3, #1
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800535a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005362:	e002      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <HAL_RCC_GetSysClockFreq+0x204>)
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800536a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800536c:	4618      	mov	r0, r3
 800536e:	3750      	adds	r7, #80	@ 0x50
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	00f42400 	.word	0x00f42400
 8005380:	007a1200 	.word	0x007a1200

08005384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005388:	4b03      	ldr	r3, [pc, #12]	@ (8005398 <HAL_RCC_GetHCLKFreq+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000004 	.word	0x20000004

0800539c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053a0:	f7ff fff0 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	0a9b      	lsrs	r3, r3, #10
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	4903      	ldr	r1, [pc, #12]	@ (80053c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40023800 	.word	0x40023800
 80053c0:	08006768 	.word	0x08006768

080053c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d038      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053ec:	4b68      	ldr	r3, [pc, #416]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053f2:	f7fc fdd7 	bl	8001fa4 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053fa:	f7fc fdd3 	bl	8001fa4 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0bd      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800540c:	4b61      	ldr	r3, [pc, #388]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f0      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	019b      	lsls	r3, r3, #6
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	495a      	ldr	r1, [pc, #360]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005432:	4b57      	ldr	r3, [pc, #348]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005438:	f7fc fdb4 	bl	8001fa4 <HAL_GetTick>
 800543c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005440:	f7fc fdb0 	bl	8001fa4 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e09a      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005452:	4b50      	ldr	r3, [pc, #320]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8083 	beq.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	4b48      	ldr	r3, [pc, #288]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005474:	4a47      	ldr	r2, [pc, #284]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547a:	6413      	str	r3, [r2, #64]	@ 0x40
 800547c:	4b45      	ldr	r3, [pc, #276]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005488:	4b43      	ldr	r3, [pc, #268]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a42      	ldr	r2, [pc, #264]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800548e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005492:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005494:	f7fc fd86 	bl	8001fa4 <HAL_GetTick>
 8005498:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549c:	f7fc fd82 	bl	8001fa4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e06c      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ba:	4b36      	ldr	r3, [pc, #216]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02f      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d028      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054e2:	4b2e      	ldr	r3, [pc, #184]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054e8:	4b2c      	ldr	r3, [pc, #176]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054ee:	4a29      	ldr	r2, [pc, #164]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054f4:	4b27      	ldr	r3, [pc, #156]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d114      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005500:	f7fc fd50 	bl	8001fa4 <HAL_GetTick>
 8005504:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005506:	e00a      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005508:	f7fc fd4c 	bl	8001fa4 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e034      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	4b1d      	ldr	r3, [pc, #116]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ee      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005536:	d10d      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005538:	4b16      	ldr	r3, [pc, #88]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554c:	4911      	ldr	r1, [pc, #68]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
 8005552:	e005      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005554:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4a0e      	ldr	r2, [pc, #56]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800555e:	6093      	str	r3, [r2, #8]
 8005560:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005562:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	4909      	ldr	r1, [pc, #36]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	4313      	orrs	r3, r2
 8005570:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	7d1a      	ldrb	r2, [r3, #20]
 8005582:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005584:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	42470068 	.word	0x42470068
 8005594:	40023800 	.word	0x40023800
 8005598:	40007000 	.word	0x40007000
 800559c:	42470e40 	.word	0x42470e40
 80055a0:	424711e0 	.word	0x424711e0

080055a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d141      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055c2:	4b25      	ldr	r3, [pc, #148]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055d8:	d131      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055da:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80055dc:	617b      	str	r3, [r7, #20]
          break;
 80055de:	e031      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ec:	d109      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80055ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055f8:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005602:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800560c:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005614:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562e:	0f1b      	lsrs	r3, r3, #28
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
          break;
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
          break;
 8005642:	bf00      	nop
        }
      }
      break;
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005646:	bf00      	nop
    }
  }
  return frequency;
 8005648:	697b      	ldr	r3, [r7, #20]
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	00bb8000 	.word	0x00bb8000
 8005660:	007a1200 	.word	0x007a1200
 8005664:	00f42400 	.word	0x00f42400

08005668 <memset>:
 8005668:	4402      	add	r2, r0
 800566a:	4603      	mov	r3, r0
 800566c:	4293      	cmp	r3, r2
 800566e:	d100      	bne.n	8005672 <memset+0xa>
 8005670:	4770      	bx	lr
 8005672:	f803 1b01 	strb.w	r1, [r3], #1
 8005676:	e7f9      	b.n	800566c <memset+0x4>

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	@ (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	@ (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	@ (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	@ (80056bc <__libc_init_array+0x44>)
 800568c:	f001 f858 	bl	8006740 <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	08006958 	.word	0x08006958
 80056b4:	08006958 	.word	0x08006958
 80056b8:	08006958 	.word	0x08006958
 80056bc:	0800695c 	.word	0x0800695c

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}
 80056dc:	0000      	movs	r0, r0
	...

080056e0 <sin>:
 80056e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056e2:	ec53 2b10 	vmov	r2, r3, d0
 80056e6:	4826      	ldr	r0, [pc, #152]	@ (8005780 <sin+0xa0>)
 80056e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80056ec:	4281      	cmp	r1, r0
 80056ee:	d807      	bhi.n	8005700 <sin+0x20>
 80056f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005778 <sin+0x98>
 80056f4:	2000      	movs	r0, #0
 80056f6:	b005      	add	sp, #20
 80056f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056fc:	f000 b90c 	b.w	8005918 <__kernel_sin>
 8005700:	4820      	ldr	r0, [pc, #128]	@ (8005784 <sin+0xa4>)
 8005702:	4281      	cmp	r1, r0
 8005704:	d908      	bls.n	8005718 <sin+0x38>
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	f7fa fd69 	bl	80001e0 <__aeabi_dsub>
 800570e:	ec41 0b10 	vmov	d0, r0, r1
 8005712:	b005      	add	sp, #20
 8005714:	f85d fb04 	ldr.w	pc, [sp], #4
 8005718:	4668      	mov	r0, sp
 800571a:	f000 f9b9 	bl	8005a90 <__ieee754_rem_pio2>
 800571e:	f000 0003 	and.w	r0, r0, #3
 8005722:	2801      	cmp	r0, #1
 8005724:	d00c      	beq.n	8005740 <sin+0x60>
 8005726:	2802      	cmp	r0, #2
 8005728:	d011      	beq.n	800574e <sin+0x6e>
 800572a:	b9e8      	cbnz	r0, 8005768 <sin+0x88>
 800572c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005730:	ed9d 0b00 	vldr	d0, [sp]
 8005734:	2001      	movs	r0, #1
 8005736:	f000 f8ef 	bl	8005918 <__kernel_sin>
 800573a:	ec51 0b10 	vmov	r0, r1, d0
 800573e:	e7e6      	b.n	800570e <sin+0x2e>
 8005740:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005744:	ed9d 0b00 	vldr	d0, [sp]
 8005748:	f000 f81e 	bl	8005788 <__kernel_cos>
 800574c:	e7f5      	b.n	800573a <sin+0x5a>
 800574e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005752:	ed9d 0b00 	vldr	d0, [sp]
 8005756:	2001      	movs	r0, #1
 8005758:	f000 f8de 	bl	8005918 <__kernel_sin>
 800575c:	ec53 2b10 	vmov	r2, r3, d0
 8005760:	4610      	mov	r0, r2
 8005762:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005766:	e7d2      	b.n	800570e <sin+0x2e>
 8005768:	ed9d 1b02 	vldr	d1, [sp, #8]
 800576c:	ed9d 0b00 	vldr	d0, [sp]
 8005770:	f000 f80a 	bl	8005788 <__kernel_cos>
 8005774:	e7f2      	b.n	800575c <sin+0x7c>
 8005776:	bf00      	nop
	...
 8005780:	3fe921fb 	.word	0x3fe921fb
 8005784:	7fefffff 	.word	0x7fefffff

08005788 <__kernel_cos>:
 8005788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	ec57 6b10 	vmov	r6, r7, d0
 8005790:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005794:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005798:	ed8d 1b00 	vstr	d1, [sp]
 800579c:	d206      	bcs.n	80057ac <__kernel_cos+0x24>
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fb f96f 	bl	8000a84 <__aeabi_d2iz>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	f000 8088 	beq.w	80058bc <__kernel_cos+0x134>
 80057ac:	4632      	mov	r2, r6
 80057ae:	463b      	mov	r3, r7
 80057b0:	4630      	mov	r0, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	f7fa fecc 	bl	8000550 <__aeabi_dmul>
 80057b8:	4b51      	ldr	r3, [pc, #324]	@ (8005900 <__kernel_cos+0x178>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	4604      	mov	r4, r0
 80057be:	460d      	mov	r5, r1
 80057c0:	f7fa fec6 	bl	8000550 <__aeabi_dmul>
 80057c4:	a340      	add	r3, pc, #256	@ (adr r3, 80058c8 <__kernel_cos+0x140>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	4682      	mov	sl, r0
 80057cc:	468b      	mov	fp, r1
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fa febd 	bl	8000550 <__aeabi_dmul>
 80057d6:	a33e      	add	r3, pc, #248	@ (adr r3, 80058d0 <__kernel_cos+0x148>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa fd02 	bl	80001e4 <__adddf3>
 80057e0:	4622      	mov	r2, r4
 80057e2:	462b      	mov	r3, r5
 80057e4:	f7fa feb4 	bl	8000550 <__aeabi_dmul>
 80057e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80058d8 <__kernel_cos+0x150>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa fcf7 	bl	80001e0 <__aeabi_dsub>
 80057f2:	4622      	mov	r2, r4
 80057f4:	462b      	mov	r3, r5
 80057f6:	f7fa feab 	bl	8000550 <__aeabi_dmul>
 80057fa:	a339      	add	r3, pc, #228	@ (adr r3, 80058e0 <__kernel_cos+0x158>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f7fa fcf0 	bl	80001e4 <__adddf3>
 8005804:	4622      	mov	r2, r4
 8005806:	462b      	mov	r3, r5
 8005808:	f7fa fea2 	bl	8000550 <__aeabi_dmul>
 800580c:	a336      	add	r3, pc, #216	@ (adr r3, 80058e8 <__kernel_cos+0x160>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fce5 	bl	80001e0 <__aeabi_dsub>
 8005816:	4622      	mov	r2, r4
 8005818:	462b      	mov	r3, r5
 800581a:	f7fa fe99 	bl	8000550 <__aeabi_dmul>
 800581e:	a334      	add	r3, pc, #208	@ (adr r3, 80058f0 <__kernel_cos+0x168>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f7fa fcde 	bl	80001e4 <__adddf3>
 8005828:	4622      	mov	r2, r4
 800582a:	462b      	mov	r3, r5
 800582c:	f7fa fe90 	bl	8000550 <__aeabi_dmul>
 8005830:	4622      	mov	r2, r4
 8005832:	462b      	mov	r3, r5
 8005834:	f7fa fe8c 	bl	8000550 <__aeabi_dmul>
 8005838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800583c:	4604      	mov	r4, r0
 800583e:	460d      	mov	r5, r1
 8005840:	4630      	mov	r0, r6
 8005842:	4639      	mov	r1, r7
 8005844:	f7fa fe84 	bl	8000550 <__aeabi_dmul>
 8005848:	460b      	mov	r3, r1
 800584a:	4602      	mov	r2, r0
 800584c:	4629      	mov	r1, r5
 800584e:	4620      	mov	r0, r4
 8005850:	f7fa fcc6 	bl	80001e0 <__aeabi_dsub>
 8005854:	4b2b      	ldr	r3, [pc, #172]	@ (8005904 <__kernel_cos+0x17c>)
 8005856:	4598      	cmp	r8, r3
 8005858:	4606      	mov	r6, r0
 800585a:	460f      	mov	r7, r1
 800585c:	d810      	bhi.n	8005880 <__kernel_cos+0xf8>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4650      	mov	r0, sl
 8005864:	4659      	mov	r1, fp
 8005866:	f7fa fcbb 	bl	80001e0 <__aeabi_dsub>
 800586a:	460b      	mov	r3, r1
 800586c:	4926      	ldr	r1, [pc, #152]	@ (8005908 <__kernel_cos+0x180>)
 800586e:	4602      	mov	r2, r0
 8005870:	2000      	movs	r0, #0
 8005872:	f7fa fcb5 	bl	80001e0 <__aeabi_dsub>
 8005876:	ec41 0b10 	vmov	d0, r0, r1
 800587a:	b003      	add	sp, #12
 800587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005880:	4b22      	ldr	r3, [pc, #136]	@ (800590c <__kernel_cos+0x184>)
 8005882:	4921      	ldr	r1, [pc, #132]	@ (8005908 <__kernel_cos+0x180>)
 8005884:	4598      	cmp	r8, r3
 8005886:	bf8c      	ite	hi
 8005888:	4d21      	ldrhi	r5, [pc, #132]	@ (8005910 <__kernel_cos+0x188>)
 800588a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800588e:	2400      	movs	r4, #0
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	2000      	movs	r0, #0
 8005896:	f7fa fca3 	bl	80001e0 <__aeabi_dsub>
 800589a:	4622      	mov	r2, r4
 800589c:	4680      	mov	r8, r0
 800589e:	4689      	mov	r9, r1
 80058a0:	462b      	mov	r3, r5
 80058a2:	4650      	mov	r0, sl
 80058a4:	4659      	mov	r1, fp
 80058a6:	f7fa fc9b 	bl	80001e0 <__aeabi_dsub>
 80058aa:	4632      	mov	r2, r6
 80058ac:	463b      	mov	r3, r7
 80058ae:	f7fa fc97 	bl	80001e0 <__aeabi_dsub>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4640      	mov	r0, r8
 80058b8:	4649      	mov	r1, r9
 80058ba:	e7da      	b.n	8005872 <__kernel_cos+0xea>
 80058bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80058f8 <__kernel_cos+0x170>
 80058c0:	e7db      	b.n	800587a <__kernel_cos+0xf2>
 80058c2:	bf00      	nop
 80058c4:	f3af 8000 	nop.w
 80058c8:	be8838d4 	.word	0xbe8838d4
 80058cc:	bda8fae9 	.word	0xbda8fae9
 80058d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80058d4:	3e21ee9e 	.word	0x3e21ee9e
 80058d8:	809c52ad 	.word	0x809c52ad
 80058dc:	3e927e4f 	.word	0x3e927e4f
 80058e0:	19cb1590 	.word	0x19cb1590
 80058e4:	3efa01a0 	.word	0x3efa01a0
 80058e8:	16c15177 	.word	0x16c15177
 80058ec:	3f56c16c 	.word	0x3f56c16c
 80058f0:	5555554c 	.word	0x5555554c
 80058f4:	3fa55555 	.word	0x3fa55555
 80058f8:	00000000 	.word	0x00000000
 80058fc:	3ff00000 	.word	0x3ff00000
 8005900:	3fe00000 	.word	0x3fe00000
 8005904:	3fd33332 	.word	0x3fd33332
 8005908:	3ff00000 	.word	0x3ff00000
 800590c:	3fe90000 	.word	0x3fe90000
 8005910:	3fd20000 	.word	0x3fd20000
 8005914:	00000000 	.word	0x00000000

08005918 <__kernel_sin>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	ec55 4b10 	vmov	r4, r5, d0
 8005920:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005924:	b085      	sub	sp, #20
 8005926:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800592a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800592e:	4680      	mov	r8, r0
 8005930:	d205      	bcs.n	800593e <__kernel_sin+0x26>
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f7fb f8a5 	bl	8000a84 <__aeabi_d2iz>
 800593a:	2800      	cmp	r0, #0
 800593c:	d052      	beq.n	80059e4 <__kernel_sin+0xcc>
 800593e:	4622      	mov	r2, r4
 8005940:	462b      	mov	r3, r5
 8005942:	4620      	mov	r0, r4
 8005944:	4629      	mov	r1, r5
 8005946:	f7fa fe03 	bl	8000550 <__aeabi_dmul>
 800594a:	4682      	mov	sl, r0
 800594c:	468b      	mov	fp, r1
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4620      	mov	r0, r4
 8005954:	4629      	mov	r1, r5
 8005956:	f7fa fdfb 	bl	8000550 <__aeabi_dmul>
 800595a:	a342      	add	r3, pc, #264	@ (adr r3, 8005a64 <__kernel_sin+0x14c>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	e9cd 0100 	strd	r0, r1, [sp]
 8005964:	4650      	mov	r0, sl
 8005966:	4659      	mov	r1, fp
 8005968:	f7fa fdf2 	bl	8000550 <__aeabi_dmul>
 800596c:	a33f      	add	r3, pc, #252	@ (adr r3, 8005a6c <__kernel_sin+0x154>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fc35 	bl	80001e0 <__aeabi_dsub>
 8005976:	4652      	mov	r2, sl
 8005978:	465b      	mov	r3, fp
 800597a:	f7fa fde9 	bl	8000550 <__aeabi_dmul>
 800597e:	a33d      	add	r3, pc, #244	@ (adr r3, 8005a74 <__kernel_sin+0x15c>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fc2e 	bl	80001e4 <__adddf3>
 8005988:	4652      	mov	r2, sl
 800598a:	465b      	mov	r3, fp
 800598c:	f7fa fde0 	bl	8000550 <__aeabi_dmul>
 8005990:	a33a      	add	r3, pc, #232	@ (adr r3, 8005a7c <__kernel_sin+0x164>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fc23 	bl	80001e0 <__aeabi_dsub>
 800599a:	4652      	mov	r2, sl
 800599c:	465b      	mov	r3, fp
 800599e:	f7fa fdd7 	bl	8000550 <__aeabi_dmul>
 80059a2:	a338      	add	r3, pc, #224	@ (adr r3, 8005a84 <__kernel_sin+0x16c>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fc1c 	bl	80001e4 <__adddf3>
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	f1b8 0f00 	cmp.w	r8, #0
 80059b4:	d11b      	bne.n	80059ee <__kernel_sin+0xd6>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4650      	mov	r0, sl
 80059bc:	4659      	mov	r1, fp
 80059be:	f7fa fdc7 	bl	8000550 <__aeabi_dmul>
 80059c2:	a325      	add	r3, pc, #148	@ (adr r3, 8005a58 <__kernel_sin+0x140>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fc0a 	bl	80001e0 <__aeabi_dsub>
 80059cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059d0:	f7fa fdbe 	bl	8000550 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa fc02 	bl	80001e4 <__adddf3>
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	ec45 4b10 	vmov	d0, r4, r5
 80059e8:	b005      	add	sp, #20
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a60 <__kernel_sin+0x148>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	f7fa fdab 	bl	8000550 <__aeabi_dmul>
 80059fa:	4632      	mov	r2, r6
 80059fc:	4680      	mov	r8, r0
 80059fe:	4689      	mov	r9, r1
 8005a00:	463b      	mov	r3, r7
 8005a02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a06:	f7fa fda3 	bl	8000550 <__aeabi_dmul>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fa fbe5 	bl	80001e0 <__aeabi_dsub>
 8005a16:	4652      	mov	r2, sl
 8005a18:	465b      	mov	r3, fp
 8005a1a:	f7fa fd99 	bl	8000550 <__aeabi_dmul>
 8005a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a22:	f7fa fbdd 	bl	80001e0 <__aeabi_dsub>
 8005a26:	a30c      	add	r3, pc, #48	@ (adr r3, 8005a58 <__kernel_sin+0x140>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a34:	f7fa fd8c 	bl	8000550 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f7fa fbd0 	bl	80001e4 <__adddf3>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4620      	mov	r0, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	f7fa fbc8 	bl	80001e0 <__aeabi_dsub>
 8005a50:	e7c6      	b.n	80059e0 <__kernel_sin+0xc8>
 8005a52:	bf00      	nop
 8005a54:	f3af 8000 	nop.w
 8005a58:	55555549 	.word	0x55555549
 8005a5c:	3fc55555 	.word	0x3fc55555
 8005a60:	3fe00000 	.word	0x3fe00000
 8005a64:	5acfd57c 	.word	0x5acfd57c
 8005a68:	3de5d93a 	.word	0x3de5d93a
 8005a6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a70:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a74:	57b1fe7d 	.word	0x57b1fe7d
 8005a78:	3ec71de3 	.word	0x3ec71de3
 8005a7c:	19c161d5 	.word	0x19c161d5
 8005a80:	3f2a01a0 	.word	0x3f2a01a0
 8005a84:	1110f8a6 	.word	0x1110f8a6
 8005a88:	3f811111 	.word	0x3f811111
 8005a8c:	00000000 	.word	0x00000000

08005a90 <__ieee754_rem_pio2>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	ec57 6b10 	vmov	r6, r7, d0
 8005a98:	4bc5      	ldr	r3, [pc, #788]	@ (8005db0 <__ieee754_rem_pio2+0x320>)
 8005a9a:	b08d      	sub	sp, #52	@ 0x34
 8005a9c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005aa0:	4598      	cmp	r8, r3
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	9704      	str	r7, [sp, #16]
 8005aa6:	d807      	bhi.n	8005ab8 <__ieee754_rem_pio2+0x28>
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	ed80 0b00 	vstr	d0, [r0]
 8005ab0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005ab4:	2500      	movs	r5, #0
 8005ab6:	e028      	b.n	8005b0a <__ieee754_rem_pio2+0x7a>
 8005ab8:	4bbe      	ldr	r3, [pc, #760]	@ (8005db4 <__ieee754_rem_pio2+0x324>)
 8005aba:	4598      	cmp	r8, r3
 8005abc:	d878      	bhi.n	8005bb0 <__ieee754_rem_pio2+0x120>
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	4dbd      	ldr	r5, [pc, #756]	@ (8005db8 <__ieee754_rem_pio2+0x328>)
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005d78 <__ieee754_rem_pio2+0x2e8>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	4639      	mov	r1, r7
 8005ace:	dd38      	ble.n	8005b42 <__ieee754_rem_pio2+0xb2>
 8005ad0:	f7fa fb86 	bl	80001e0 <__aeabi_dsub>
 8005ad4:	45a8      	cmp	r8, r5
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	460f      	mov	r7, r1
 8005ada:	d01a      	beq.n	8005b12 <__ieee754_rem_pio2+0x82>
 8005adc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005d80 <__ieee754_rem_pio2+0x2f0>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fb7d 	bl	80001e0 <__aeabi_dsub>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4680      	mov	r8, r0
 8005aec:	4689      	mov	r9, r1
 8005aee:	4630      	mov	r0, r6
 8005af0:	4639      	mov	r1, r7
 8005af2:	f7fa fb75 	bl	80001e0 <__aeabi_dsub>
 8005af6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005d80 <__ieee754_rem_pio2+0x2f0>)
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f7fa fb70 	bl	80001e0 <__aeabi_dsub>
 8005b00:	e9c4 8900 	strd	r8, r9, [r4]
 8005b04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b08:	2501      	movs	r5, #1
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	b00d      	add	sp, #52	@ 0x34
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	a39d      	add	r3, pc, #628	@ (adr r3, 8005d88 <__ieee754_rem_pio2+0x2f8>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fb62 	bl	80001e0 <__aeabi_dsub>
 8005b1c:	a39c      	add	r3, pc, #624	@ (adr r3, 8005d90 <__ieee754_rem_pio2+0x300>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	4606      	mov	r6, r0
 8005b24:	460f      	mov	r7, r1
 8005b26:	f7fa fb5b 	bl	80001e0 <__aeabi_dsub>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4680      	mov	r8, r0
 8005b30:	4689      	mov	r9, r1
 8005b32:	4630      	mov	r0, r6
 8005b34:	4639      	mov	r1, r7
 8005b36:	f7fa fb53 	bl	80001e0 <__aeabi_dsub>
 8005b3a:	a395      	add	r3, pc, #596	@ (adr r3, 8005d90 <__ieee754_rem_pio2+0x300>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	e7dc      	b.n	8005afc <__ieee754_rem_pio2+0x6c>
 8005b42:	f7fa fb4f 	bl	80001e4 <__adddf3>
 8005b46:	45a8      	cmp	r8, r5
 8005b48:	4606      	mov	r6, r0
 8005b4a:	460f      	mov	r7, r1
 8005b4c:	d018      	beq.n	8005b80 <__ieee754_rem_pio2+0xf0>
 8005b4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005d80 <__ieee754_rem_pio2+0x2f0>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f7fa fb46 	bl	80001e4 <__adddf3>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	4689      	mov	r9, r1
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	f7fa fb3c 	bl	80001e0 <__aeabi_dsub>
 8005b68:	a385      	add	r3, pc, #532	@ (adr r3, 8005d80 <__ieee754_rem_pio2+0x2f0>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fb39 	bl	80001e4 <__adddf3>
 8005b72:	f04f 35ff 	mov.w	r5, #4294967295
 8005b76:	e9c4 8900 	strd	r8, r9, [r4]
 8005b7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b7e:	e7c4      	b.n	8005b0a <__ieee754_rem_pio2+0x7a>
 8005b80:	a381      	add	r3, pc, #516	@ (adr r3, 8005d88 <__ieee754_rem_pio2+0x2f8>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fb2d 	bl	80001e4 <__adddf3>
 8005b8a:	a381      	add	r3, pc, #516	@ (adr r3, 8005d90 <__ieee754_rem_pio2+0x300>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	4606      	mov	r6, r0
 8005b92:	460f      	mov	r7, r1
 8005b94:	f7fa fb26 	bl	80001e4 <__adddf3>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	4689      	mov	r9, r1
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	f7fa fb1c 	bl	80001e0 <__aeabi_dsub>
 8005ba8:	a379      	add	r3, pc, #484	@ (adr r3, 8005d90 <__ieee754_rem_pio2+0x300>)
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	e7de      	b.n	8005b6e <__ieee754_rem_pio2+0xde>
 8005bb0:	4b82      	ldr	r3, [pc, #520]	@ (8005dbc <__ieee754_rem_pio2+0x32c>)
 8005bb2:	4598      	cmp	r8, r3
 8005bb4:	f200 80d1 	bhi.w	8005d5a <__ieee754_rem_pio2+0x2ca>
 8005bb8:	f000 f966 	bl	8005e88 <fabs>
 8005bbc:	ec57 6b10 	vmov	r6, r7, d0
 8005bc0:	a375      	add	r3, pc, #468	@ (adr r3, 8005d98 <__ieee754_rem_pio2+0x308>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	f7fa fcc1 	bl	8000550 <__aeabi_dmul>
 8005bce:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc0 <__ieee754_rem_pio2+0x330>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f7fa fb07 	bl	80001e4 <__adddf3>
 8005bd6:	f7fa ff55 	bl	8000a84 <__aeabi_d2iz>
 8005bda:	4605      	mov	r5, r0
 8005bdc:	f7fa fc4e 	bl	800047c <__aeabi_i2d>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005be8:	a363      	add	r3, pc, #396	@ (adr r3, 8005d78 <__ieee754_rem_pio2+0x2e8>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fcaf 	bl	8000550 <__aeabi_dmul>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7fa faf1 	bl	80001e0 <__aeabi_dsub>
 8005bfe:	a360      	add	r3, pc, #384	@ (adr r3, 8005d80 <__ieee754_rem_pio2+0x2f0>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	4682      	mov	sl, r0
 8005c06:	468b      	mov	fp, r1
 8005c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c0c:	f7fa fca0 	bl	8000550 <__aeabi_dmul>
 8005c10:	2d1f      	cmp	r5, #31
 8005c12:	4606      	mov	r6, r0
 8005c14:	460f      	mov	r7, r1
 8005c16:	dc0c      	bgt.n	8005c32 <__ieee754_rem_pio2+0x1a2>
 8005c18:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc4 <__ieee754_rem_pio2+0x334>)
 8005c1a:	1e6a      	subs	r2, r5, #1
 8005c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c20:	4543      	cmp	r3, r8
 8005c22:	d006      	beq.n	8005c32 <__ieee754_rem_pio2+0x1a2>
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	4650      	mov	r0, sl
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	f7fa fad8 	bl	80001e0 <__aeabi_dsub>
 8005c30:	e00e      	b.n	8005c50 <__ieee754_rem_pio2+0x1c0>
 8005c32:	463b      	mov	r3, r7
 8005c34:	4632      	mov	r2, r6
 8005c36:	4650      	mov	r0, sl
 8005c38:	4659      	mov	r1, fp
 8005c3a:	f7fa fad1 	bl	80001e0 <__aeabi_dsub>
 8005c3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c48:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	dc02      	bgt.n	8005c56 <__ieee754_rem_pio2+0x1c6>
 8005c50:	e9c4 0100 	strd	r0, r1, [r4]
 8005c54:	e039      	b.n	8005cca <__ieee754_rem_pio2+0x23a>
 8005c56:	a34c      	add	r3, pc, #304	@ (adr r3, 8005d88 <__ieee754_rem_pio2+0x2f8>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c60:	f7fa fc76 	bl	8000550 <__aeabi_dmul>
 8005c64:	4606      	mov	r6, r0
 8005c66:	460f      	mov	r7, r1
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4650      	mov	r0, sl
 8005c6e:	4659      	mov	r1, fp
 8005c70:	f7fa fab6 	bl	80001e0 <__aeabi_dsub>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4680      	mov	r8, r0
 8005c7a:	4689      	mov	r9, r1
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	f7fa faae 	bl	80001e0 <__aeabi_dsub>
 8005c84:	4632      	mov	r2, r6
 8005c86:	463b      	mov	r3, r7
 8005c88:	f7fa faaa 	bl	80001e0 <__aeabi_dsub>
 8005c8c:	a340      	add	r3, pc, #256	@ (adr r3, 8005d90 <__ieee754_rem_pio2+0x300>)
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	4606      	mov	r6, r0
 8005c94:	460f      	mov	r7, r1
 8005c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9a:	f7fa fc59 	bl	8000550 <__aeabi_dmul>
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	f7fa fa9d 	bl	80001e0 <__aeabi_dsub>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4606      	mov	r6, r0
 8005cac:	460f      	mov	r7, r1
 8005cae:	4640      	mov	r0, r8
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	f7fa fa95 	bl	80001e0 <__aeabi_dsub>
 8005cb6:	9a05      	ldr	r2, [sp, #20]
 8005cb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b31      	cmp	r3, #49	@ 0x31
 8005cc0:	dc20      	bgt.n	8005d04 <__ieee754_rem_pio2+0x274>
 8005cc2:	e9c4 0100 	strd	r0, r1, [r4]
 8005cc6:	46c2      	mov	sl, r8
 8005cc8:	46cb      	mov	fp, r9
 8005cca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005cce:	4650      	mov	r0, sl
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	f7fa fa83 	bl	80001e0 <__aeabi_dsub>
 8005cda:	463b      	mov	r3, r7
 8005cdc:	4632      	mov	r2, r6
 8005cde:	f7fa fa7f 	bl	80001e0 <__aeabi_dsub>
 8005ce2:	9b04      	ldr	r3, [sp, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cea:	f6bf af0e 	bge.w	8005b0a <__ieee754_rem_pio2+0x7a>
 8005cee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005cf2:	6063      	str	r3, [r4, #4]
 8005cf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cf8:	f8c4 8000 	str.w	r8, [r4]
 8005cfc:	60a0      	str	r0, [r4, #8]
 8005cfe:	60e3      	str	r3, [r4, #12]
 8005d00:	426d      	negs	r5, r5
 8005d02:	e702      	b.n	8005b0a <__ieee754_rem_pio2+0x7a>
 8005d04:	a326      	add	r3, pc, #152	@ (adr r3, 8005da0 <__ieee754_rem_pio2+0x310>)
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0e:	f7fa fc1f 	bl	8000550 <__aeabi_dmul>
 8005d12:	4606      	mov	r6, r0
 8005d14:	460f      	mov	r7, r1
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fa5f 	bl	80001e0 <__aeabi_dsub>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4682      	mov	sl, r0
 8005d28:	468b      	mov	fp, r1
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	f7fa fa57 	bl	80001e0 <__aeabi_dsub>
 8005d32:	4632      	mov	r2, r6
 8005d34:	463b      	mov	r3, r7
 8005d36:	f7fa fa53 	bl	80001e0 <__aeabi_dsub>
 8005d3a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005da8 <__ieee754_rem_pio2+0x318>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	4606      	mov	r6, r0
 8005d42:	460f      	mov	r7, r1
 8005d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d48:	f7fa fc02 	bl	8000550 <__aeabi_dmul>
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	463b      	mov	r3, r7
 8005d50:	f7fa fa46 	bl	80001e0 <__aeabi_dsub>
 8005d54:	4606      	mov	r6, r0
 8005d56:	460f      	mov	r7, r1
 8005d58:	e764      	b.n	8005c24 <__ieee754_rem_pio2+0x194>
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <__ieee754_rem_pio2+0x338>)
 8005d5c:	4598      	cmp	r8, r3
 8005d5e:	d935      	bls.n	8005dcc <__ieee754_rem_pio2+0x33c>
 8005d60:	4632      	mov	r2, r6
 8005d62:	463b      	mov	r3, r7
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fa3a 	bl	80001e0 <__aeabi_dsub>
 8005d6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d70:	e9c4 0100 	strd	r0, r1, [r4]
 8005d74:	e69e      	b.n	8005ab4 <__ieee754_rem_pio2+0x24>
 8005d76:	bf00      	nop
 8005d78:	54400000 	.word	0x54400000
 8005d7c:	3ff921fb 	.word	0x3ff921fb
 8005d80:	1a626331 	.word	0x1a626331
 8005d84:	3dd0b461 	.word	0x3dd0b461
 8005d88:	1a600000 	.word	0x1a600000
 8005d8c:	3dd0b461 	.word	0x3dd0b461
 8005d90:	2e037073 	.word	0x2e037073
 8005d94:	3ba3198a 	.word	0x3ba3198a
 8005d98:	6dc9c883 	.word	0x6dc9c883
 8005d9c:	3fe45f30 	.word	0x3fe45f30
 8005da0:	2e000000 	.word	0x2e000000
 8005da4:	3ba3198a 	.word	0x3ba3198a
 8005da8:	252049c1 	.word	0x252049c1
 8005dac:	397b839a 	.word	0x397b839a
 8005db0:	3fe921fb 	.word	0x3fe921fb
 8005db4:	4002d97b 	.word	0x4002d97b
 8005db8:	3ff921fb 	.word	0x3ff921fb
 8005dbc:	413921fb 	.word	0x413921fb
 8005dc0:	3fe00000 	.word	0x3fe00000
 8005dc4:	08006778 	.word	0x08006778
 8005dc8:	7fefffff 	.word	0x7fefffff
 8005dcc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005dd0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005dd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005dd8:	4630      	mov	r0, r6
 8005dda:	460f      	mov	r7, r1
 8005ddc:	f7fa fe52 	bl	8000a84 <__aeabi_d2iz>
 8005de0:	f7fa fb4c 	bl	800047c <__aeabi_i2d>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005df0:	f7fa f9f6 	bl	80001e0 <__aeabi_dsub>
 8005df4:	4b22      	ldr	r3, [pc, #136]	@ (8005e80 <__ieee754_rem_pio2+0x3f0>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	f7fa fbaa 	bl	8000550 <__aeabi_dmul>
 8005dfc:	460f      	mov	r7, r1
 8005dfe:	4606      	mov	r6, r0
 8005e00:	f7fa fe40 	bl	8000a84 <__aeabi_d2iz>
 8005e04:	f7fa fb3a 	bl	800047c <__aeabi_i2d>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	4639      	mov	r1, r7
 8005e10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e14:	f7fa f9e4 	bl	80001e0 <__aeabi_dsub>
 8005e18:	4b19      	ldr	r3, [pc, #100]	@ (8005e80 <__ieee754_rem_pio2+0x3f0>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f7fa fb98 	bl	8000550 <__aeabi_dmul>
 8005e20:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005e24:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005e28:	f04f 0803 	mov.w	r8, #3
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	2700      	movs	r7, #0
 8005e30:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005e34:	4632      	mov	r2, r6
 8005e36:	463b      	mov	r3, r7
 8005e38:	46c2      	mov	sl, r8
 8005e3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e3e:	f7fa fdef 	bl	8000a20 <__aeabi_dcmpeq>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d1f4      	bne.n	8005e30 <__ieee754_rem_pio2+0x3a0>
 8005e46:	4b0f      	ldr	r3, [pc, #60]	@ (8005e84 <__ieee754_rem_pio2+0x3f4>)
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	462a      	mov	r2, r5
 8005e50:	4653      	mov	r3, sl
 8005e52:	4621      	mov	r1, r4
 8005e54:	a806      	add	r0, sp, #24
 8005e56:	f000 f81f 	bl	8005e98 <__kernel_rem_pio2>
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	4605      	mov	r5, r0
 8005e60:	f6bf ae53 	bge.w	8005b0a <__ieee754_rem_pio2+0x7a>
 8005e64:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005e68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e6c:	e9c4 2300 	strd	r2, r3, [r4]
 8005e70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005e74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e78:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005e7c:	e740      	b.n	8005d00 <__ieee754_rem_pio2+0x270>
 8005e7e:	bf00      	nop
 8005e80:	41700000 	.word	0x41700000
 8005e84:	080067f8 	.word	0x080067f8

08005e88 <fabs>:
 8005e88:	ec51 0b10 	vmov	r0, r1, d0
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005e92:	ec43 2b10 	vmov	d0, r2, r3
 8005e96:	4770      	bx	lr

08005e98 <__kernel_rem_pio2>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	ed2d 8b02 	vpush	{d8}
 8005ea0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005ea4:	f112 0f14 	cmn.w	r2, #20
 8005ea8:	9306      	str	r3, [sp, #24]
 8005eaa:	9104      	str	r1, [sp, #16]
 8005eac:	4bbe      	ldr	r3, [pc, #760]	@ (80061a8 <__kernel_rem_pio2+0x310>)
 8005eae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005eb0:	9008      	str	r0, [sp, #32]
 8005eb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	9b06      	ldr	r3, [sp, #24]
 8005eba:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ebe:	bfa8      	it	ge
 8005ec0:	1ed4      	subge	r4, r2, #3
 8005ec2:	9305      	str	r3, [sp, #20]
 8005ec4:	bfb2      	itee	lt
 8005ec6:	2400      	movlt	r4, #0
 8005ec8:	2318      	movge	r3, #24
 8005eca:	fb94 f4f3 	sdivge	r4, r4, r3
 8005ece:	f06f 0317 	mvn.w	r3, #23
 8005ed2:	fb04 3303 	mla	r3, r4, r3, r3
 8005ed6:	eb03 0b02 	add.w	fp, r3, r2
 8005eda:	9b00      	ldr	r3, [sp, #0]
 8005edc:	9a05      	ldr	r2, [sp, #20]
 8005ede:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006198 <__kernel_rem_pio2+0x300>
 8005ee2:	eb03 0802 	add.w	r8, r3, r2
 8005ee6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005ee8:	1aa7      	subs	r7, r4, r2
 8005eea:	ae20      	add	r6, sp, #128	@ 0x80
 8005eec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	4545      	cmp	r5, r8
 8005ef4:	dd13      	ble.n	8005f1e <__kernel_rem_pio2+0x86>
 8005ef6:	9b06      	ldr	r3, [sp, #24]
 8005ef8:	aa20      	add	r2, sp, #128	@ 0x80
 8005efa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005efe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005f02:	f04f 0800 	mov.w	r8, #0
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	4598      	cmp	r8, r3
 8005f0a:	dc31      	bgt.n	8005f70 <__kernel_rem_pio2+0xd8>
 8005f0c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006198 <__kernel_rem_pio2+0x300>
 8005f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f18:	462f      	mov	r7, r5
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	e01b      	b.n	8005f56 <__kernel_rem_pio2+0xbe>
 8005f1e:	42ef      	cmn	r7, r5
 8005f20:	d407      	bmi.n	8005f32 <__kernel_rem_pio2+0x9a>
 8005f22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005f26:	f7fa faa9 	bl	800047c <__aeabi_i2d>
 8005f2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005f2e:	3501      	adds	r5, #1
 8005f30:	e7df      	b.n	8005ef2 <__kernel_rem_pio2+0x5a>
 8005f32:	ec51 0b18 	vmov	r0, r1, d8
 8005f36:	e7f8      	b.n	8005f2a <__kernel_rem_pio2+0x92>
 8005f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005f40:	f7fa fb06 	bl	8000550 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f4c:	f7fa f94a 	bl	80001e4 <__adddf3>
 8005f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f54:	3601      	adds	r6, #1
 8005f56:	9b05      	ldr	r3, [sp, #20]
 8005f58:	429e      	cmp	r6, r3
 8005f5a:	f1a7 0708 	sub.w	r7, r7, #8
 8005f5e:	ddeb      	ble.n	8005f38 <__kernel_rem_pio2+0xa0>
 8005f60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f64:	f108 0801 	add.w	r8, r8, #1
 8005f68:	ecaa 7b02 	vstmia	sl!, {d7}
 8005f6c:	3508      	adds	r5, #8
 8005f6e:	e7ca      	b.n	8005f06 <__kernel_rem_pio2+0x6e>
 8005f70:	9b00      	ldr	r3, [sp, #0]
 8005f72:	f8dd 8000 	ldr.w	r8, [sp]
 8005f76:	aa0c      	add	r2, sp, #48	@ 0x30
 8005f78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005f80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f8c:	ab98      	add	r3, sp, #608	@ 0x260
 8005f8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005f92:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005f96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f9a:	ac0c      	add	r4, sp, #48	@ 0x30
 8005f9c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005f9e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005fa2:	46a1      	mov	r9, r4
 8005fa4:	46c2      	mov	sl, r8
 8005fa6:	f1ba 0f00 	cmp.w	sl, #0
 8005faa:	f1a5 0508 	sub.w	r5, r5, #8
 8005fae:	dc77      	bgt.n	80060a0 <__kernel_rem_pio2+0x208>
 8005fb0:	4658      	mov	r0, fp
 8005fb2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005fb6:	f000 fac7 	bl	8006548 <scalbn>
 8005fba:	ec57 6b10 	vmov	r6, r7, d0
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	f7fa fac2 	bl	8000550 <__aeabi_dmul>
 8005fcc:	ec41 0b10 	vmov	d0, r0, r1
 8005fd0:	f000 fb3a 	bl	8006648 <floor>
 8005fd4:	4b75      	ldr	r3, [pc, #468]	@ (80061ac <__kernel_rem_pio2+0x314>)
 8005fd6:	ec51 0b10 	vmov	r0, r1, d0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f7fa fab8 	bl	8000550 <__aeabi_dmul>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa f8fa 	bl	80001e0 <__aeabi_dsub>
 8005fec:	460f      	mov	r7, r1
 8005fee:	4606      	mov	r6, r0
 8005ff0:	f7fa fd48 	bl	8000a84 <__aeabi_d2iz>
 8005ff4:	9002      	str	r0, [sp, #8]
 8005ff6:	f7fa fa41 	bl	800047c <__aeabi_i2d>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4630      	mov	r0, r6
 8006000:	4639      	mov	r1, r7
 8006002:	f7fa f8ed 	bl	80001e0 <__aeabi_dsub>
 8006006:	f1bb 0f00 	cmp.w	fp, #0
 800600a:	4606      	mov	r6, r0
 800600c:	460f      	mov	r7, r1
 800600e:	dd6c      	ble.n	80060ea <__kernel_rem_pio2+0x252>
 8006010:	f108 31ff 	add.w	r1, r8, #4294967295
 8006014:	ab0c      	add	r3, sp, #48	@ 0x30
 8006016:	9d02      	ldr	r5, [sp, #8]
 8006018:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800601c:	f1cb 0018 	rsb	r0, fp, #24
 8006020:	fa43 f200 	asr.w	r2, r3, r0
 8006024:	4415      	add	r5, r2
 8006026:	4082      	lsls	r2, r0
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	aa0c      	add	r2, sp, #48	@ 0x30
 800602c:	9502      	str	r5, [sp, #8]
 800602e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006032:	f1cb 0217 	rsb	r2, fp, #23
 8006036:	fa43 f902 	asr.w	r9, r3, r2
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	dd64      	ble.n	800610a <__kernel_rem_pio2+0x272>
 8006040:	9b02      	ldr	r3, [sp, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	3301      	adds	r3, #1
 8006046:	9302      	str	r3, [sp, #8]
 8006048:	4615      	mov	r5, r2
 800604a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800604e:	4590      	cmp	r8, r2
 8006050:	f300 80b8 	bgt.w	80061c4 <__kernel_rem_pio2+0x32c>
 8006054:	f1bb 0f00 	cmp.w	fp, #0
 8006058:	dd07      	ble.n	800606a <__kernel_rem_pio2+0x1d2>
 800605a:	f1bb 0f01 	cmp.w	fp, #1
 800605e:	f000 80bf 	beq.w	80061e0 <__kernel_rem_pio2+0x348>
 8006062:	f1bb 0f02 	cmp.w	fp, #2
 8006066:	f000 80c6 	beq.w	80061f6 <__kernel_rem_pio2+0x35e>
 800606a:	f1b9 0f02 	cmp.w	r9, #2
 800606e:	d14c      	bne.n	800610a <__kernel_rem_pio2+0x272>
 8006070:	4632      	mov	r2, r6
 8006072:	463b      	mov	r3, r7
 8006074:	494e      	ldr	r1, [pc, #312]	@ (80061b0 <__kernel_rem_pio2+0x318>)
 8006076:	2000      	movs	r0, #0
 8006078:	f7fa f8b2 	bl	80001e0 <__aeabi_dsub>
 800607c:	4606      	mov	r6, r0
 800607e:	460f      	mov	r7, r1
 8006080:	2d00      	cmp	r5, #0
 8006082:	d042      	beq.n	800610a <__kernel_rem_pio2+0x272>
 8006084:	4658      	mov	r0, fp
 8006086:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80061a0 <__kernel_rem_pio2+0x308>
 800608a:	f000 fa5d 	bl	8006548 <scalbn>
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	ec53 2b10 	vmov	r2, r3, d0
 8006096:	f7fa f8a3 	bl	80001e0 <__aeabi_dsub>
 800609a:	4606      	mov	r6, r0
 800609c:	460f      	mov	r7, r1
 800609e:	e034      	b.n	800610a <__kernel_rem_pio2+0x272>
 80060a0:	4b44      	ldr	r3, [pc, #272]	@ (80061b4 <__kernel_rem_pio2+0x31c>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a8:	f7fa fa52 	bl	8000550 <__aeabi_dmul>
 80060ac:	f7fa fcea 	bl	8000a84 <__aeabi_d2iz>
 80060b0:	f7fa f9e4 	bl	800047c <__aeabi_i2d>
 80060b4:	4b40      	ldr	r3, [pc, #256]	@ (80061b8 <__kernel_rem_pio2+0x320>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	4606      	mov	r6, r0
 80060ba:	460f      	mov	r7, r1
 80060bc:	f7fa fa48 	bl	8000550 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c8:	f7fa f88a 	bl	80001e0 <__aeabi_dsub>
 80060cc:	f7fa fcda 	bl	8000a84 <__aeabi_d2iz>
 80060d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060d4:	f849 0b04 	str.w	r0, [r9], #4
 80060d8:	4639      	mov	r1, r7
 80060da:	4630      	mov	r0, r6
 80060dc:	f7fa f882 	bl	80001e4 <__adddf3>
 80060e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e8:	e75d      	b.n	8005fa6 <__kernel_rem_pio2+0x10e>
 80060ea:	d107      	bne.n	80060fc <__kernel_rem_pio2+0x264>
 80060ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80060f0:	aa0c      	add	r2, sp, #48	@ 0x30
 80060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80060fa:	e79e      	b.n	800603a <__kernel_rem_pio2+0x1a2>
 80060fc:	4b2f      	ldr	r3, [pc, #188]	@ (80061bc <__kernel_rem_pio2+0x324>)
 80060fe:	2200      	movs	r2, #0
 8006100:	f7fa fcac 	bl	8000a5c <__aeabi_dcmpge>
 8006104:	2800      	cmp	r0, #0
 8006106:	d143      	bne.n	8006190 <__kernel_rem_pio2+0x2f8>
 8006108:	4681      	mov	r9, r0
 800610a:	2200      	movs	r2, #0
 800610c:	2300      	movs	r3, #0
 800610e:	4630      	mov	r0, r6
 8006110:	4639      	mov	r1, r7
 8006112:	f7fa fc85 	bl	8000a20 <__aeabi_dcmpeq>
 8006116:	2800      	cmp	r0, #0
 8006118:	f000 80bf 	beq.w	800629a <__kernel_rem_pio2+0x402>
 800611c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006120:	2200      	movs	r2, #0
 8006122:	9900      	ldr	r1, [sp, #0]
 8006124:	428b      	cmp	r3, r1
 8006126:	da6e      	bge.n	8006206 <__kernel_rem_pio2+0x36e>
 8006128:	2a00      	cmp	r2, #0
 800612a:	f000 8089 	beq.w	8006240 <__kernel_rem_pio2+0x3a8>
 800612e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006132:	ab0c      	add	r3, sp, #48	@ 0x30
 8006134:	f1ab 0b18 	sub.w	fp, fp, #24
 8006138:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f6      	beq.n	800612e <__kernel_rem_pio2+0x296>
 8006140:	4658      	mov	r0, fp
 8006142:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80061a0 <__kernel_rem_pio2+0x308>
 8006146:	f000 f9ff 	bl	8006548 <scalbn>
 800614a:	f108 0301 	add.w	r3, r8, #1
 800614e:	00da      	lsls	r2, r3, #3
 8006150:	9205      	str	r2, [sp, #20]
 8006152:	ec55 4b10 	vmov	r4, r5, d0
 8006156:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006158:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80061b4 <__kernel_rem_pio2+0x31c>
 800615c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006160:	4646      	mov	r6, r8
 8006162:	f04f 0a00 	mov.w	sl, #0
 8006166:	2e00      	cmp	r6, #0
 8006168:	f280 80cf 	bge.w	800630a <__kernel_rem_pio2+0x472>
 800616c:	4644      	mov	r4, r8
 800616e:	2c00      	cmp	r4, #0
 8006170:	f2c0 80fd 	blt.w	800636e <__kernel_rem_pio2+0x4d6>
 8006174:	4b12      	ldr	r3, [pc, #72]	@ (80061c0 <__kernel_rem_pio2+0x328>)
 8006176:	461f      	mov	r7, r3
 8006178:	ab70      	add	r3, sp, #448	@ 0x1c0
 800617a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800617e:	9306      	str	r3, [sp, #24]
 8006180:	f04f 0a00 	mov.w	sl, #0
 8006184:	f04f 0b00 	mov.w	fp, #0
 8006188:	2600      	movs	r6, #0
 800618a:	eba8 0504 	sub.w	r5, r8, r4
 800618e:	e0e2      	b.n	8006356 <__kernel_rem_pio2+0x4be>
 8006190:	f04f 0902 	mov.w	r9, #2
 8006194:	e754      	b.n	8006040 <__kernel_rem_pio2+0x1a8>
 8006196:	bf00      	nop
	...
 80061a4:	3ff00000 	.word	0x3ff00000
 80061a8:	08006940 	.word	0x08006940
 80061ac:	40200000 	.word	0x40200000
 80061b0:	3ff00000 	.word	0x3ff00000
 80061b4:	3e700000 	.word	0x3e700000
 80061b8:	41700000 	.word	0x41700000
 80061bc:	3fe00000 	.word	0x3fe00000
 80061c0:	08006900 	.word	0x08006900
 80061c4:	f854 3b04 	ldr.w	r3, [r4], #4
 80061c8:	b945      	cbnz	r5, 80061dc <__kernel_rem_pio2+0x344>
 80061ca:	b123      	cbz	r3, 80061d6 <__kernel_rem_pio2+0x33e>
 80061cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80061d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80061d4:	2301      	movs	r3, #1
 80061d6:	3201      	adds	r2, #1
 80061d8:	461d      	mov	r5, r3
 80061da:	e738      	b.n	800604e <__kernel_rem_pio2+0x1b6>
 80061dc:	1acb      	subs	r3, r1, r3
 80061de:	e7f7      	b.n	80061d0 <__kernel_rem_pio2+0x338>
 80061e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80061e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80061ee:	a90c      	add	r1, sp, #48	@ 0x30
 80061f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80061f4:	e739      	b.n	800606a <__kernel_rem_pio2+0x1d2>
 80061f6:	f108 32ff 	add.w	r2, r8, #4294967295
 80061fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80061fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006200:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006204:	e7f3      	b.n	80061ee <__kernel_rem_pio2+0x356>
 8006206:	a90c      	add	r1, sp, #48	@ 0x30
 8006208:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800620c:	3b01      	subs	r3, #1
 800620e:	430a      	orrs	r2, r1
 8006210:	e787      	b.n	8006122 <__kernel_rem_pio2+0x28a>
 8006212:	3401      	adds	r4, #1
 8006214:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006218:	2a00      	cmp	r2, #0
 800621a:	d0fa      	beq.n	8006212 <__kernel_rem_pio2+0x37a>
 800621c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800621e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006222:	eb0d 0503 	add.w	r5, sp, r3
 8006226:	9b06      	ldr	r3, [sp, #24]
 8006228:	aa20      	add	r2, sp, #128	@ 0x80
 800622a:	4443      	add	r3, r8
 800622c:	f108 0701 	add.w	r7, r8, #1
 8006230:	3d98      	subs	r5, #152	@ 0x98
 8006232:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006236:	4444      	add	r4, r8
 8006238:	42bc      	cmp	r4, r7
 800623a:	da04      	bge.n	8006246 <__kernel_rem_pio2+0x3ae>
 800623c:	46a0      	mov	r8, r4
 800623e:	e6a2      	b.n	8005f86 <__kernel_rem_pio2+0xee>
 8006240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006242:	2401      	movs	r4, #1
 8006244:	e7e6      	b.n	8006214 <__kernel_rem_pio2+0x37c>
 8006246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006248:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800624c:	f7fa f916 	bl	800047c <__aeabi_i2d>
 8006250:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006518 <__kernel_rem_pio2+0x680>
 8006254:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006258:	ed8d 7b02 	vstr	d7, [sp, #8]
 800625c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006260:	46b2      	mov	sl, r6
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	9b05      	ldr	r3, [sp, #20]
 8006268:	4598      	cmp	r8, r3
 800626a:	dd05      	ble.n	8006278 <__kernel_rem_pio2+0x3e0>
 800626c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006270:	3701      	adds	r7, #1
 8006272:	eca5 7b02 	vstmia	r5!, {d7}
 8006276:	e7df      	b.n	8006238 <__kernel_rem_pio2+0x3a0>
 8006278:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800627c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006280:	f7fa f966 	bl	8000550 <__aeabi_dmul>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628c:	f7f9 ffaa 	bl	80001e4 <__adddf3>
 8006290:	f108 0801 	add.w	r8, r8, #1
 8006294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006298:	e7e5      	b.n	8006266 <__kernel_rem_pio2+0x3ce>
 800629a:	f1cb 0000 	rsb	r0, fp, #0
 800629e:	ec47 6b10 	vmov	d0, r6, r7
 80062a2:	f000 f951 	bl	8006548 <scalbn>
 80062a6:	ec55 4b10 	vmov	r4, r5, d0
 80062aa:	4b9d      	ldr	r3, [pc, #628]	@ (8006520 <__kernel_rem_pio2+0x688>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7fa fbd3 	bl	8000a5c <__aeabi_dcmpge>
 80062b6:	b300      	cbz	r0, 80062fa <__kernel_rem_pio2+0x462>
 80062b8:	4b9a      	ldr	r3, [pc, #616]	@ (8006524 <__kernel_rem_pio2+0x68c>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	4620      	mov	r0, r4
 80062be:	4629      	mov	r1, r5
 80062c0:	f7fa f946 	bl	8000550 <__aeabi_dmul>
 80062c4:	f7fa fbde 	bl	8000a84 <__aeabi_d2iz>
 80062c8:	4606      	mov	r6, r0
 80062ca:	f7fa f8d7 	bl	800047c <__aeabi_i2d>
 80062ce:	4b94      	ldr	r3, [pc, #592]	@ (8006520 <__kernel_rem_pio2+0x688>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	f7fa f93d 	bl	8000550 <__aeabi_dmul>
 80062d6:	460b      	mov	r3, r1
 80062d8:	4602      	mov	r2, r0
 80062da:	4629      	mov	r1, r5
 80062dc:	4620      	mov	r0, r4
 80062de:	f7f9 ff7f 	bl	80001e0 <__aeabi_dsub>
 80062e2:	f7fa fbcf 	bl	8000a84 <__aeabi_d2iz>
 80062e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80062e8:	f10b 0b18 	add.w	fp, fp, #24
 80062ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80062f0:	f108 0801 	add.w	r8, r8, #1
 80062f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80062f8:	e722      	b.n	8006140 <__kernel_rem_pio2+0x2a8>
 80062fa:	4620      	mov	r0, r4
 80062fc:	4629      	mov	r1, r5
 80062fe:	f7fa fbc1 	bl	8000a84 <__aeabi_d2iz>
 8006302:	ab0c      	add	r3, sp, #48	@ 0x30
 8006304:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006308:	e71a      	b.n	8006140 <__kernel_rem_pio2+0x2a8>
 800630a:	ab0c      	add	r3, sp, #48	@ 0x30
 800630c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006310:	f7fa f8b4 	bl	800047c <__aeabi_i2d>
 8006314:	4622      	mov	r2, r4
 8006316:	462b      	mov	r3, r5
 8006318:	f7fa f91a 	bl	8000550 <__aeabi_dmul>
 800631c:	4652      	mov	r2, sl
 800631e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006322:	465b      	mov	r3, fp
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7fa f912 	bl	8000550 <__aeabi_dmul>
 800632c:	3e01      	subs	r6, #1
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	e718      	b.n	8006166 <__kernel_rem_pio2+0x2ce>
 8006334:	9906      	ldr	r1, [sp, #24]
 8006336:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800633a:	9106      	str	r1, [sp, #24]
 800633c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006340:	f7fa f906 	bl	8000550 <__aeabi_dmul>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4650      	mov	r0, sl
 800634a:	4659      	mov	r1, fp
 800634c:	f7f9 ff4a 	bl	80001e4 <__adddf3>
 8006350:	3601      	adds	r6, #1
 8006352:	4682      	mov	sl, r0
 8006354:	468b      	mov	fp, r1
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	429e      	cmp	r6, r3
 800635a:	dc01      	bgt.n	8006360 <__kernel_rem_pio2+0x4c8>
 800635c:	42b5      	cmp	r5, r6
 800635e:	dae9      	bge.n	8006334 <__kernel_rem_pio2+0x49c>
 8006360:	ab48      	add	r3, sp, #288	@ 0x120
 8006362:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006366:	e9c5 ab00 	strd	sl, fp, [r5]
 800636a:	3c01      	subs	r4, #1
 800636c:	e6ff      	b.n	800616e <__kernel_rem_pio2+0x2d6>
 800636e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006370:	2b02      	cmp	r3, #2
 8006372:	dc0b      	bgt.n	800638c <__kernel_rem_pio2+0x4f4>
 8006374:	2b00      	cmp	r3, #0
 8006376:	dc39      	bgt.n	80063ec <__kernel_rem_pio2+0x554>
 8006378:	d05d      	beq.n	8006436 <__kernel_rem_pio2+0x59e>
 800637a:	9b02      	ldr	r3, [sp, #8]
 800637c:	f003 0007 	and.w	r0, r3, #7
 8006380:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006384:	ecbd 8b02 	vpop	{d8}
 8006388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800638e:	2b03      	cmp	r3, #3
 8006390:	d1f3      	bne.n	800637a <__kernel_rem_pio2+0x4e2>
 8006392:	9b05      	ldr	r3, [sp, #20]
 8006394:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006398:	eb0d 0403 	add.w	r4, sp, r3
 800639c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80063a0:	4625      	mov	r5, r4
 80063a2:	46c2      	mov	sl, r8
 80063a4:	f1ba 0f00 	cmp.w	sl, #0
 80063a8:	f1a5 0508 	sub.w	r5, r5, #8
 80063ac:	dc6b      	bgt.n	8006486 <__kernel_rem_pio2+0x5ee>
 80063ae:	4645      	mov	r5, r8
 80063b0:	2d01      	cmp	r5, #1
 80063b2:	f1a4 0408 	sub.w	r4, r4, #8
 80063b6:	f300 8087 	bgt.w	80064c8 <__kernel_rem_pio2+0x630>
 80063ba:	9c05      	ldr	r4, [sp, #20]
 80063bc:	ab48      	add	r3, sp, #288	@ 0x120
 80063be:	441c      	add	r4, r3
 80063c0:	2000      	movs	r0, #0
 80063c2:	2100      	movs	r1, #0
 80063c4:	f1b8 0f01 	cmp.w	r8, #1
 80063c8:	f300 809c 	bgt.w	8006504 <__kernel_rem_pio2+0x66c>
 80063cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80063d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	f040 80a6 	bne.w	8006528 <__kernel_rem_pio2+0x690>
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	e9c3 7800 	strd	r7, r8, [r3]
 80063e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80063e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80063ea:	e7c6      	b.n	800637a <__kernel_rem_pio2+0x4e2>
 80063ec:	9d05      	ldr	r5, [sp, #20]
 80063ee:	ab48      	add	r3, sp, #288	@ 0x120
 80063f0:	441d      	add	r5, r3
 80063f2:	4644      	mov	r4, r8
 80063f4:	2000      	movs	r0, #0
 80063f6:	2100      	movs	r1, #0
 80063f8:	2c00      	cmp	r4, #0
 80063fa:	da35      	bge.n	8006468 <__kernel_rem_pio2+0x5d0>
 80063fc:	f1b9 0f00 	cmp.w	r9, #0
 8006400:	d038      	beq.n	8006474 <__kernel_rem_pio2+0x5dc>
 8006402:	4602      	mov	r2, r0
 8006404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006408:	9c04      	ldr	r4, [sp, #16]
 800640a:	e9c4 2300 	strd	r2, r3, [r4]
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006416:	f7f9 fee3 	bl	80001e0 <__aeabi_dsub>
 800641a:	ad4a      	add	r5, sp, #296	@ 0x128
 800641c:	2401      	movs	r4, #1
 800641e:	45a0      	cmp	r8, r4
 8006420:	da2b      	bge.n	800647a <__kernel_rem_pio2+0x5e2>
 8006422:	f1b9 0f00 	cmp.w	r9, #0
 8006426:	d002      	beq.n	800642e <__kernel_rem_pio2+0x596>
 8006428:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800642c:	4619      	mov	r1, r3
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006434:	e7a1      	b.n	800637a <__kernel_rem_pio2+0x4e2>
 8006436:	9c05      	ldr	r4, [sp, #20]
 8006438:	ab48      	add	r3, sp, #288	@ 0x120
 800643a:	441c      	add	r4, r3
 800643c:	2000      	movs	r0, #0
 800643e:	2100      	movs	r1, #0
 8006440:	f1b8 0f00 	cmp.w	r8, #0
 8006444:	da09      	bge.n	800645a <__kernel_rem_pio2+0x5c2>
 8006446:	f1b9 0f00 	cmp.w	r9, #0
 800644a:	d002      	beq.n	8006452 <__kernel_rem_pio2+0x5ba>
 800644c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006450:	4619      	mov	r1, r3
 8006452:	9b04      	ldr	r3, [sp, #16]
 8006454:	e9c3 0100 	strd	r0, r1, [r3]
 8006458:	e78f      	b.n	800637a <__kernel_rem_pio2+0x4e2>
 800645a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800645e:	f7f9 fec1 	bl	80001e4 <__adddf3>
 8006462:	f108 38ff 	add.w	r8, r8, #4294967295
 8006466:	e7eb      	b.n	8006440 <__kernel_rem_pio2+0x5a8>
 8006468:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800646c:	f7f9 feba 	bl	80001e4 <__adddf3>
 8006470:	3c01      	subs	r4, #1
 8006472:	e7c1      	b.n	80063f8 <__kernel_rem_pio2+0x560>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	e7c6      	b.n	8006408 <__kernel_rem_pio2+0x570>
 800647a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800647e:	f7f9 feb1 	bl	80001e4 <__adddf3>
 8006482:	3401      	adds	r4, #1
 8006484:	e7cb      	b.n	800641e <__kernel_rem_pio2+0x586>
 8006486:	ed95 7b00 	vldr	d7, [r5]
 800648a:	ed8d 7b00 	vstr	d7, [sp]
 800648e:	ed95 7b02 	vldr	d7, [r5, #8]
 8006492:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006496:	ec53 2b17 	vmov	r2, r3, d7
 800649a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800649e:	f7f9 fea1 	bl	80001e4 <__adddf3>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4606      	mov	r6, r0
 80064a8:	460f      	mov	r7, r1
 80064aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ae:	f7f9 fe97 	bl	80001e0 <__aeabi_dsub>
 80064b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064b6:	f7f9 fe95 	bl	80001e4 <__adddf3>
 80064ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80064c2:	e9c5 6700 	strd	r6, r7, [r5]
 80064c6:	e76d      	b.n	80063a4 <__kernel_rem_pio2+0x50c>
 80064c8:	ed94 7b00 	vldr	d7, [r4]
 80064cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80064d0:	ec51 0b17 	vmov	r0, r1, d7
 80064d4:	4652      	mov	r2, sl
 80064d6:	465b      	mov	r3, fp
 80064d8:	ed8d 7b00 	vstr	d7, [sp]
 80064dc:	f7f9 fe82 	bl	80001e4 <__adddf3>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ec:	f7f9 fe78 	bl	80001e0 <__aeabi_dsub>
 80064f0:	4652      	mov	r2, sl
 80064f2:	465b      	mov	r3, fp
 80064f4:	f7f9 fe76 	bl	80001e4 <__adddf3>
 80064f8:	3d01      	subs	r5, #1
 80064fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064fe:	e9c4 6700 	strd	r6, r7, [r4]
 8006502:	e755      	b.n	80063b0 <__kernel_rem_pio2+0x518>
 8006504:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006508:	f7f9 fe6c 	bl	80001e4 <__adddf3>
 800650c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006510:	e758      	b.n	80063c4 <__kernel_rem_pio2+0x52c>
 8006512:	bf00      	nop
 8006514:	f3af 8000 	nop.w
	...
 8006520:	41700000 	.word	0x41700000
 8006524:	3e700000 	.word	0x3e700000
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	9a04      	ldr	r2, [sp, #16]
 800652c:	601f      	str	r7, [r3, #0]
 800652e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006532:	605c      	str	r4, [r3, #4]
 8006534:	609d      	str	r5, [r3, #8]
 8006536:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800653a:	60d3      	str	r3, [r2, #12]
 800653c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006540:	6110      	str	r0, [r2, #16]
 8006542:	6153      	str	r3, [r2, #20]
 8006544:	e719      	b.n	800637a <__kernel_rem_pio2+0x4e2>
 8006546:	bf00      	nop

08006548 <scalbn>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	ec55 4b10 	vmov	r4, r5, d0
 800654e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006552:	4606      	mov	r6, r0
 8006554:	462b      	mov	r3, r5
 8006556:	b991      	cbnz	r1, 800657e <scalbn+0x36>
 8006558:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800655c:	4323      	orrs	r3, r4
 800655e:	d03d      	beq.n	80065dc <scalbn+0x94>
 8006560:	4b35      	ldr	r3, [pc, #212]	@ (8006638 <scalbn+0xf0>)
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	2200      	movs	r2, #0
 8006568:	f7f9 fff2 	bl	8000550 <__aeabi_dmul>
 800656c:	4b33      	ldr	r3, [pc, #204]	@ (800663c <scalbn+0xf4>)
 800656e:	429e      	cmp	r6, r3
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	da0f      	bge.n	8006596 <scalbn+0x4e>
 8006576:	a328      	add	r3, pc, #160	@ (adr r3, 8006618 <scalbn+0xd0>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	e01e      	b.n	80065bc <scalbn+0x74>
 800657e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006582:	4291      	cmp	r1, r2
 8006584:	d10b      	bne.n	800659e <scalbn+0x56>
 8006586:	4622      	mov	r2, r4
 8006588:	4620      	mov	r0, r4
 800658a:	4629      	mov	r1, r5
 800658c:	f7f9 fe2a 	bl	80001e4 <__adddf3>
 8006590:	4604      	mov	r4, r0
 8006592:	460d      	mov	r5, r1
 8006594:	e022      	b.n	80065dc <scalbn+0x94>
 8006596:	460b      	mov	r3, r1
 8006598:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800659c:	3936      	subs	r1, #54	@ 0x36
 800659e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80065a2:	4296      	cmp	r6, r2
 80065a4:	dd0d      	ble.n	80065c2 <scalbn+0x7a>
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006620 <scalbn+0xd8>)
 80065aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ae:	da02      	bge.n	80065b6 <scalbn+0x6e>
 80065b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006628 <scalbn+0xe0>)
 80065b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006620 <scalbn+0xd8>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7f9 ffc8 	bl	8000550 <__aeabi_dmul>
 80065c0:	e7e6      	b.n	8006590 <scalbn+0x48>
 80065c2:	1872      	adds	r2, r6, r1
 80065c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80065c8:	428a      	cmp	r2, r1
 80065ca:	dcec      	bgt.n	80065a6 <scalbn+0x5e>
 80065cc:	2a00      	cmp	r2, #0
 80065ce:	dd08      	ble.n	80065e2 <scalbn+0x9a>
 80065d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065dc:	ec45 4b10 	vmov	d0, r4, r5
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80065e6:	da08      	bge.n	80065fa <scalbn+0xb2>
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8006618 <scalbn+0xd0>)
 80065ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065f0:	dac1      	bge.n	8006576 <scalbn+0x2e>
 80065f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8006630 <scalbn+0xe8>)
 80065f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065f8:	e7bd      	b.n	8006576 <scalbn+0x2e>
 80065fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065fe:	3236      	adds	r2, #54	@ 0x36
 8006600:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006604:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006608:	4620      	mov	r0, r4
 800660a:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <scalbn+0xf8>)
 800660c:	4629      	mov	r1, r5
 800660e:	2200      	movs	r2, #0
 8006610:	e7d4      	b.n	80065bc <scalbn+0x74>
 8006612:	bf00      	nop
 8006614:	f3af 8000 	nop.w
 8006618:	c2f8f359 	.word	0xc2f8f359
 800661c:	01a56e1f 	.word	0x01a56e1f
 8006620:	8800759c 	.word	0x8800759c
 8006624:	7e37e43c 	.word	0x7e37e43c
 8006628:	8800759c 	.word	0x8800759c
 800662c:	fe37e43c 	.word	0xfe37e43c
 8006630:	c2f8f359 	.word	0xc2f8f359
 8006634:	81a56e1f 	.word	0x81a56e1f
 8006638:	43500000 	.word	0x43500000
 800663c:	ffff3cb0 	.word	0xffff3cb0
 8006640:	3c900000 	.word	0x3c900000
 8006644:	00000000 	.word	0x00000000

08006648 <floor>:
 8006648:	ec51 0b10 	vmov	r0, r1, d0
 800664c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006654:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006658:	2e13      	cmp	r6, #19
 800665a:	460c      	mov	r4, r1
 800665c:	4605      	mov	r5, r0
 800665e:	4680      	mov	r8, r0
 8006660:	dc34      	bgt.n	80066cc <floor+0x84>
 8006662:	2e00      	cmp	r6, #0
 8006664:	da17      	bge.n	8006696 <floor+0x4e>
 8006666:	a332      	add	r3, pc, #200	@ (adr r3, 8006730 <floor+0xe8>)
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f7f9 fdba 	bl	80001e4 <__adddf3>
 8006670:	2200      	movs	r2, #0
 8006672:	2300      	movs	r3, #0
 8006674:	f7fa f9fc 	bl	8000a70 <__aeabi_dcmpgt>
 8006678:	b150      	cbz	r0, 8006690 <floor+0x48>
 800667a:	2c00      	cmp	r4, #0
 800667c:	da55      	bge.n	800672a <floor+0xe2>
 800667e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006682:	432c      	orrs	r4, r5
 8006684:	2500      	movs	r5, #0
 8006686:	42ac      	cmp	r4, r5
 8006688:	4c2b      	ldr	r4, [pc, #172]	@ (8006738 <floor+0xf0>)
 800668a:	bf08      	it	eq
 800668c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	e023      	b.n	80066de <floor+0x96>
 8006696:	4f29      	ldr	r7, [pc, #164]	@ (800673c <floor+0xf4>)
 8006698:	4137      	asrs	r7, r6
 800669a:	ea01 0307 	and.w	r3, r1, r7
 800669e:	4303      	orrs	r3, r0
 80066a0:	d01d      	beq.n	80066de <floor+0x96>
 80066a2:	a323      	add	r3, pc, #140	@ (adr r3, 8006730 <floor+0xe8>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 fd9c 	bl	80001e4 <__adddf3>
 80066ac:	2200      	movs	r2, #0
 80066ae:	2300      	movs	r3, #0
 80066b0:	f7fa f9de 	bl	8000a70 <__aeabi_dcmpgt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d0eb      	beq.n	8006690 <floor+0x48>
 80066b8:	2c00      	cmp	r4, #0
 80066ba:	bfbe      	ittt	lt
 80066bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80066c0:	4133      	asrlt	r3, r6
 80066c2:	18e4      	addlt	r4, r4, r3
 80066c4:	ea24 0407 	bic.w	r4, r4, r7
 80066c8:	2500      	movs	r5, #0
 80066ca:	e7e1      	b.n	8006690 <floor+0x48>
 80066cc:	2e33      	cmp	r6, #51	@ 0x33
 80066ce:	dd0a      	ble.n	80066e6 <floor+0x9e>
 80066d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80066d4:	d103      	bne.n	80066de <floor+0x96>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	f7f9 fd83 	bl	80001e4 <__adddf3>
 80066de:	ec41 0b10 	vmov	d0, r0, r1
 80066e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80066ea:	f04f 37ff 	mov.w	r7, #4294967295
 80066ee:	40df      	lsrs	r7, r3
 80066f0:	4207      	tst	r7, r0
 80066f2:	d0f4      	beq.n	80066de <floor+0x96>
 80066f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006730 <floor+0xe8>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 fd73 	bl	80001e4 <__adddf3>
 80066fe:	2200      	movs	r2, #0
 8006700:	2300      	movs	r3, #0
 8006702:	f7fa f9b5 	bl	8000a70 <__aeabi_dcmpgt>
 8006706:	2800      	cmp	r0, #0
 8006708:	d0c2      	beq.n	8006690 <floor+0x48>
 800670a:	2c00      	cmp	r4, #0
 800670c:	da0a      	bge.n	8006724 <floor+0xdc>
 800670e:	2e14      	cmp	r6, #20
 8006710:	d101      	bne.n	8006716 <floor+0xce>
 8006712:	3401      	adds	r4, #1
 8006714:	e006      	b.n	8006724 <floor+0xdc>
 8006716:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800671a:	2301      	movs	r3, #1
 800671c:	40b3      	lsls	r3, r6
 800671e:	441d      	add	r5, r3
 8006720:	4545      	cmp	r5, r8
 8006722:	d3f6      	bcc.n	8006712 <floor+0xca>
 8006724:	ea25 0507 	bic.w	r5, r5, r7
 8006728:	e7b2      	b.n	8006690 <floor+0x48>
 800672a:	2500      	movs	r5, #0
 800672c:	462c      	mov	r4, r5
 800672e:	e7af      	b.n	8006690 <floor+0x48>
 8006730:	8800759c 	.word	0x8800759c
 8006734:	7e37e43c 	.word	0x7e37e43c
 8006738:	bff00000 	.word	0xbff00000
 800673c:	000fffff 	.word	0x000fffff

08006740 <_init>:
 8006740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006742:	bf00      	nop
 8006744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006746:	bc08      	pop	{r3}
 8006748:	469e      	mov	lr, r3
 800674a:	4770      	bx	lr

0800674c <_fini>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	bf00      	nop
 8006750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006752:	bc08      	pop	{r3}
 8006754:	469e      	mov	lr, r3
 8006756:	4770      	bx	lr
